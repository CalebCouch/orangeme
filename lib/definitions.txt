
//TEXT
TextSize{
	Name(int)
}

TextWeight{
	Name(int)
}

TextType{
  Header,
  Label
}

Alignment{
	Left,
	Center,
	Right
}



TextInput
IconButton,
Button,
Text



CText(text: String, type: TextType, size: TextSize, color: Option<Color>, alignment: Alignment = Alignment::Center, underline: bool, truncate: bool){
  let color = type == TextType::Text ? Color::gray : Color::White;
  let overflow = overflow.Ellipses;
	//textType should set defaults that can then be overriden
	return Text(
		text,
		fontSize: textSize,
		color: color,
		alignment: alignment
		underline ? apply underline,
	)
}

Color{
  Bitcoin,
  White,
  Gray,
  Blue,
}

Size{
  XXL(96),
  XL(64),
  LG(48)
}

//A SINGLE ENUM IS NOT COMPATIBLE BETWEEN HEADING AND LABEL/BRAND/TEXT (Heading has 6 variants, the others have 5, different naming conventions)
TextSize{
	XL(24),
	LG(20),
	MD(16),
	SM(14),
	XS(12)
}

Button(label: String, buttonVariant: String, size: String, enabled: bool, hover: bool, onPressed: Func){
	textColor = if ((buttonVariant == secondary || ghost || bitcoin) && enabled){color: AppColors.white} else if (buttonVariant == primary || (bitcoin && !enabled)){color: AppColors.black} else if((buttonVariant == secondary || ghost) && (!enabled)){color: AppColors.darkgrey}
	buttonColor = if(buttonVariant == primary && enabled){color: AppColors.white}else if(buttonVariant == secondary || ghost && !hover){color: AppColors.black} else if(buttonVariant == secondary || ghost){color: AppColors.darkgrey} else if(buttonVariant == bitcoin && enabled){color: AppColors.orange} else if(buttonVariant == bitcoin || primary && !enabled){color: AppColors.grey}
	borderColor = if(buttonVariant == secondary){color: AppColors.white} else{color: Colors.transparent}
	const borderRadius = BorderRadius.circular(24);
	Clickable Container -> onPressed()(
		border: borderColor,
		borderRadius: borderRadius,
		backgroundColor = buttonColor,
		CText(label, textColor)
	)
}

IconButton(icon: String, color: Color, enabled: bool size: Size = Size::LG, onPressed: Option<Func>) {
  let icon_color = enabled ? color : Color::Gray;
  fn icon_on_pressed() {
    if enabled && on_pressed.is_some() {
      onPressed()
     } else {
      () => {}
    }
  }
}

TextInput(placeholder: String, icon: Option<Icon>, onChanged: Func, expandable: bool, error: Option<String>) {
  is_focused = FocusNode //etc
  placeholder_color = Color::Gray
  textcolor = error ? Color::Error : Color::White
  border_color = error ? Color::Error : (is_focused ? Color::White : Color::Gray)
}




Interface(header: Header, content: Content, bumper: Bumper, nav: Option<ModeNav>) {
    return Container(
		child: Column(
			children: [
				header,
				content,
				bumper,
				navBar
			]
		)
	)
}

Content(content: Vec<Widget>) {
  let witdth = expand;
  let height = expand;

  return Column(children: content);
}

Header(left: IconButton, center: Text/PFPStackWithText, right: IconButton/Button) {
  let width = expand;
  let height = 48
  let padding = 16
}

PrimaryHeader(text: String) = Header(None, Text(text, "Header", TextSize::3), None);

Dashboard(myBalance, currentPrice, transactionsList){
  Interface(
    header: PrimaryHeader("wallet"),
    content: Column centered(
	//display amount in fiat & BTC
      ValueDisplay(
        amount: myBalance,
		currentPrice: currentPrice
      ),
      Spacing(content_padding),
	//transaction history
      ListItemGroup(
        Vec<ListItem(transaction, currentPrice)>
      ),
    )
    bumper: DoubleButtonBumper(
      firstButtonText: "Receive", 
      secondButtonText: "Send", 
      firstButtonOnPressed: enterReceiveFlow(), 
      secondButtonOnPressed: enterSendFlow(),
    ),
    nav: ModeNav(
      currentIndex
    )
  )
}


//LIST IIEM
//Exists: components/list_item_group.dart -> listItem()

ListItem(transaction: Transaction, currentPrice: Price){
	Clickable Container  takes to -> TransactionDetails(transaction: transaction, price: currentPrice)(
		Row SpaceBetween(
			children:[
				Column(
					children: [
						(text: String, type: TextType, size: TextSize, color: Option<Color>, alignment: Alignment = Alignment::Center, underline: bool, truncate: bool){
						CText(transaction.received(or something similar) ?? 'Received Bitcoin' : 'Sent Bitcoin',  'MD', Appcolors.text, None, None, None),
						CText(evaluateTimestamp(), 'MD', AppColors.textSecondary, None, None, None),
					]
				),
				Column(
					children:[
						CText(formatNetValue(transaction.net-transaction.fee, currentPrice), 'MD', AppColors.text, None, None, None),
						CText('Details', 'MD', AppColors.textSecondary, None, true, None),
					]
				)
			]	
		)
	)
}

//LIST ITEM GROUP
//Exists: components/list_item_group.dart

ListItemGroup(listItems: Vec<ListItem(transaction, currentPrice)>){
	ScrollableContainer(
		listItems
	)
}

TransactionDetails(transaction: Transaction, currentPrice: Price){
	Interface(
		header: PrimaryHeader(transaction.received ?? 'Received Bitcoin' : 'Sent Bitcoin')
		content(
			Column centered(
				children:[
					ValueDisplay(transaction.net, currentPrice),
					TabularGroup(Vec<tabularItem(transaction)>)
				]
			),
		),
		bumper(
			Button('Done', )
			),
	)
}

DoubleButtonBumper(text: firstButtonText, text: secondButtonText, firstButtonOnPressed: Func(), secondButtonOnPressed: Func()){
	Row(
		children:[
			Button(firstButtonText, bitcoin, MD, true, false, firstButtonOnPressed),
			Button(secondButtonText, bitcoin, MD, true, false, secondButtonOnPressed)
		]
	)
}

//CURRENT ICON BUTTON DESIGN IS MAYBE NOT A GREAT FIT BECAUSE BEHAVIOR IS DIFFERENT HERE, WHITE ICON IS ENABLED, GREY ICON IS ENABLED

ModeNav(currentIndex: int){
	Row spacebetween(
		IconButton(if currentIndex == 0 -> color white && disabled else color grey && enabled),
		IconButton(if currentIndex == 1 -> color white && disabled else color grey && enabled),
	)
}






//Widget
MessageTextInput(on_press: Func, on_changed: Func) {
  let text: String = "";
  fn validMessage(text: String) -> bool;

  let icon_color = validMessage(text) 

  return {
    TextInput(
      "Message",
      Icon(
        "send",
        Color::White,
        validMessage(text),
        on_press
      ),
      on_changed,
      true,
      None
    )
  }
}


//SPACING

Spacing(h: int, w: int) {
	SizedBox(h, w ?? h)
}

//CONSTS

--paddings
const content_padding = 24;
const bumper_padding = 16;
const header_padding = 16;
const list_item_padding = 16;
const message_bubble_padding = [16, 12];
const message_stack_padding = 8;
const button_padding = [16, 12]
const button_padding_sep = [12, 8]


--sizing
const xxl = 96;
const xl = 64;
const lg = 48;
const md = 32;
const sm = 24;

const headingTextSize = 4;
const headingPrimaryTextSize = 3;
const headingMessageTextSize = 5;

// BASIC INTERFACE




MessagesHeader(string: pfp, string: text){
	Header(
		left: SVG(pfp),
		center: CustomText(
			textType: heading,
			textSize: headingPrimaryTextSize, 
			text: text
		)
	)
}

StackHeader(text, onPressed{}, buttonType){
  buttonType default back
	Header(
		right: buttonType = "back" ? backButton(
			onPressed{onPressed}
		) : buttonType = "exit" ? exit(),
		center: CustomText(
			textType: heading,
			textSize: headingTextSize, 
			text: text,
		)
	)
}

StackMessageHeader(profiles[], onBack{}, displayGroup{}){
	Header(
		right: backButton(
			onPressed{onBack}
		),
		center: profiles.length > 1 ? DisplayGroupCenter(profiles) : DisplayProfile(profiles[0])
		left: groupInfo(
			onPressed{displayGroup}
		)
	)
}

StackButton(text, onBack{}, onNext{}){
	Header(
		right: backButton(
			onPressed{onBack}
		),
		center: CustomText(
			textType: heading,
			textSize: headingTextSize, 
			text: text,
		)
		left: button(
      buttonType: "ghost",
      buttonSize: md,
			onPressed{onNext}
		)
	)
}

//DISPLAY PROFILES
DisplayGroupCenter(profiles){
	return Column (
		GroupAvatars(profiles),
		CustomText(
			textType: heading,
			textSize: headingMessageTextSize, 
			text: "Group Message",
		)
	)
}

GroupAvatars(profiles){
	--list cannot be longer than 5
	list = profiles.length > 5 : 5 {
		circle(
			image: Profile.picture
		)
	}
}

DisplayProfile(profile){
	return Column (
		Avatar(profile.picture),
		CustomText(
			textType: heading,
			textSize: headingMessageTextSize, 
			text: profile.name,
		)
	)
}

Avatar(profilePhoto){
	--list cannot be longer than 5
	list = profiles.length > 5 : 5 {
		circle(
			image: profilePhoto
		)
	}
}

//PROFILES
Profile (){
	name: (),
	picture: (),
}


//CONTENT
Content(contentWidget){
	return Container (
		padding: const EdgeInsets.all(content_padding),
		contentWidget,
	)
}

//BUMPER
Bumper(contentWidget) {
	return Container(
	    padding: bumper_padding,
		alignment: Alignment.center,
	    child: contentWidget
	)
}


Header(left, center, right)

Left(icon: icon,) {
	icon,
	onPressed
}

Center(string: Text, icon: icon){
	if(icon == null){
		text
	}else{
		Column(
			text,
			icon
		)
	}
}

Right(string: text, icon: icon){
	if(text){
		text
	}else if(icon){
		icon,
		onPressed
	}
}

//Unique case exists: components/message_appbar.dart


//BTC VALUE
//exists: components/value_display.dart

//unique case: components/keyboard_value_display.dart could be refactored to work with standard BTC VALUE display, however I had difficulties with this before



//MESSAGE ITEM
//exists: components/message_item.dart

MessageItem(string: Icon, string: Title, string: Subtitle){
	Container (
		padding: vertical: list_item_padding,
		Row(
			image: Icon,
			list_item_padding,
			Column(
				text: Title,
				text: Subtitle,
			),
		)
	)
}

//MESSAGE ITEM GROUP
//is this supposed to be a message item group?
//exists: components/message_item_group.dart

MessageHistoryItem(string: optional<ProfilePicture>, string: Name, string: MostRecentMessage, bool: group){
	child: MessageItem(
		profilePicture(
			profilePicture: optional<ProfilePicture>, 
			isGroup: _isGroup,
			size: "LG",
		),
		right: Column (
			title,
			Subtitle
		)
	)
}

//TABULAR
//exists: components/tabular_group.dart -> Tabular

Tabular (text: Left, text: Right){
	Row SpaceBetween {
		text: left,
		text: right
	}
}

//TABULAR GROUP
//exists: components/tabular_group.dart

TabularGroup(array-text: dataType, array-text: content){
	listGroup {
		Tabular(dataType[var], content[var])
	}
}

//QR CODE
//receive.dart

//DATA ITEM
//send4.dart, refactor into widget


//TRANSACTION RESULT
//send5.dart, refactor into widget

TransactionResult (transactionType, amount){
	Container Expand (
		alignment: Alignment.center,
		Column (
			children: [
				image: btc_image,
				text: Text("You ${transactionType} ${amount}")
			]
		)
	)
}

//PROFILE PICTURE
profilePicture(string: optional<pfp>, int: size, bool: isGroup){
	if(pfp == null && isGroup) pfp == defaultGroupProfile
	if(pfp == null && isGroup == false) pfp == defaultSingleProfile
	image: Image(
		if(pfp == null && isGroup) pfp == defaultGroupProfile
		if(pfp == null && isGroup == false) pfp == defaultSingleProfile
		pfp,
		width: size,
		height: size,
	)
}

//MESSAGE BUBBLES
//exists: components/message_bubbles.dart

messageBubble(text, isIncoming){
	Container(
		padding: (vertical: message_bubble_padding[0], horizontal: message_bubble_padding[1]),
		color: isIncoming ? bg-secondary : bitcoin
		child: text,
	)
}

//are these concatenated messages from the same minute?

messageStackGroupIncoming(senderInfo, time-date, textContent){
	Row(
		senderInfo.profilePicture,
		message_stack_padding,
		Column (
			messageBubble(
				text: textContent, 
				isIncoming: true,
			),
			message_stack_padding,
			Row (
				senderInfo.name, 
				text: time-date,
			),
		)
	)
}

//assuming this is non-concatenated?
messageStackSingleIncoming(time-date, textContent){
	Column (
		messageBubble(
			text: CustomText(textContent), 
			isIncoming: _isIncoming
		),
		message_stack_padding,
		text: time-date,
	)
}


//assuming these are concatenated messages from the same minute?

messageStackSent(time-date, textContent){
	Column (
		messageBubble(
			text: textContent
		),
		message_stack_padding,
		text: time-date,
	)
}


//BUTTON
//exists: components/button.dart refactor to include size variants

//unique case: components/receive_send.dart


//ICON BUTTON
//style, size, hover, disabled


//TEXT INPUT
//exists: components/text_input.dart 

//LIST SELECTOR
//exists: components/list_selector.dart

//NUMERIC KEYPAD
//exists: components/numeric_keypad.dart

//CONTACT GROUP
//exists: social/new_message.dart -> buildRecipientsList refactor into a widget

//QR CODE SCANNER
//exists: send2.dart -> startQRScanner() -> showDialog() refactor into a widget (not styled properly)

//PROFILE HEADING

//TAB NAVIGATOR
//exists: components/tab_navigator.dart


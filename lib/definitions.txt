
//TEXT
TextSize{
	Name(int)
}

TextWeight{
	Name(int)
}

Alignment{
	Left,
	Center,
	Right
}

CText(text: String, size: TextSize, color: Color = White, alignment: Alignment = Alignment::Center, Underline = false) {
	Text(text, size, color, alignment, underline);
}

RText(text: String, size: TextSize, color: Color = white, Alignment= ALignment::Center, Underline false, overflow = overflow.Ellipses){
	Flexible(
            child: RichText(
        		overflow: TextOverflow.ellipsis,
                    text: TextSpan(
                    text: text,
                    style: (size, color, alignment, underline)),
            ),
    ),
}

//SPACING

Spacing(h: int, w: int) {
	SizedBox::new(h, w ?? h)
}

//PADDING CONSTS

const content_padding = 24;
const bumper_padding = 16;
const list_item_padding = 16;
const message_bubble_padding = [16, 12];
const message_stack_padding = 8;

// BASIC INTERFACE
Interface(header: Header, content: Content, bumper: Bumper, nav: Option<ModeNav>) {
    return Container(
		padding: content_padding,
		child: Column(
			children: [
				header(),
				Spacing(content_padding),
				content(),
				Spacing(content_padding),
				bumper(),
				Spacing(content_padding),
				navBar
			]
		)
	)
}

Content(widgetlist, padding) {
	column (
		children[

		]
	)
    child: widget,
}



Bumper(content: Vec<Widget>) {
	return Container(
	    padding: bumper_padding,
	    child: Row(
		childern
	    )
	)
}

Header(left, center, right)

Left(icon: icon,) {
	icon,
	onPressed
}

Center(string: Text, icon: icon){
	if(icon == null){
		text
	}else{
		Column(
			text,
			icon
		)
	}
}

Right(string: text, icon: icon){
	if(text){
		text
	}else if(icon){
		icon,
		onPressed
	}
}

//Unique case exists: widgets/message_appbar.dart

//LIST IIEM
//Exists: widgets/transaction_list.dart -> buildTransactionCard

ListItem(string: LeftTop, string: RightTop, string: LeftBottom, string: RightBottom){
	Row SpaceBetween(
		Column(LeftTop, LeftBottom),
		Column(RightTop, RightBottom),
	)
}

//LIST ITEM GROUP
//Exists: widgets/transaction_list.dart

TransactionHistoryItem(bool: IsReceived, int: Amount, string: Time/Date){
	if IsReceived, TransactionType will be received btc or else sent btc
	Container (
		padding: vertical: list_item_padding,
		child: ListItem(
			text: TransactionType, 
			text: Amount, 
			text: Time/Date, 
			text: "Details"
		)
	)
}


//MESSAGE ITEM
//exists: widgets/contact_card.dart

MessageItem(string: Icon, string: Title, string: Subtitle){
	Container (
		padding: vertical: list_item_padding,
		Row(
			image: Icon,
			list_item_padding,
			Column(
				text: Title,
				text: Subtitle,
			),
		)
	)
}

//MESSAGE ITEM GROUP
//is this supposed to be a message item group?

MessageHistoryItem(string: optional<ProfilePicture>, string: Name, string: MostRecentMessage, bool: group){
	child: MessageItem(
		profilePicture(
			profilePicture: optional<ProfilePicture>, 
			isGroup: group,
			size: "LG",
		),
		Name, 
		MostRecentMessage,
	)
}

//TABULAR
//exists: widgets/transaction_details.dart -> DetailRow

Tabular (text: Left, text: Right){
	Row SpaceBetween {
		text: left,
		text: right
	}
}

//TABULAR GROUP
//exists: widgets/transaction_details.dart

TabularGroup(array-text: dataType, array-text: content){
	listGroup {
		Tabular(dataType[var], content[var])
	}
}

//QR CODE
//receive.dart

//DATA ITEM
//send4.dart, refactor into widget


//TRANSACTION RESULT
//send5.dart, refactor into widget

TransactionResult (transactionType, amount){
	Container Expand (
		alignment: Alignment.center,
		Column (
			children: [
				image: btc_image,
				text: Text("You ${transactionType} ${amount})
			]
		)
	)
}

//PROFILE PICTURE

pfpSizes(string: size){
	xxl: 96,
	xl: 64,
	lg: 48,
	md: 32,
	sm: 24,
}

profilePicture(optional<pfp>, size, isGroup){
	if(pfp == null && isGroup) pfp == defaultGroupProfile
	if(pfp == null && isGroup == false) pfp == defaultSingleProfile
	image: Image(
		if(pfp == null && isGroup) pfp == defaultGroupProfile
		if(pfp == null && isGroup == false) pfp == defaultSingleProfile
		pfp,
		width: pfpSizes(size),
		height: pfpSizes(size),
	)
}

//MESSAGE BUBBLES
//exists: widgets/text_bauble.dart

messageBubble(text, isIncoming){
	if(isIncoming == null) isIncoming = false,
	Container(
		padding: (vertical: message_bubble_padding[0], horizontal: message_bubble_padding[1]),
		color: isIncoming ? bg-secondary : bitcoin
		child: text,
	)
}

//are these concatenated messages from the same minute?

messageStackGroupIncoming(senderInfo, time-date, textContent){
	Row(
		senderInfo.profilePicture,
		message_stack_padding,
		Column (
			messageBubble(
				text: textContent, 
				isIncoming: true
			),
			message_stack_padding,
			Row (
				senderInfo.name, 
				text: time-date,
			),
		)
	)
}

//assuming this is non-concatenated?

messageStackSingleIncoming(time-date, textContent){
	Column (
		messageBubble(
			text: textContent, 
			isIncoming: true
		),
		message_stack_padding,
		text: time-date,
	)
}

//assuming these are concatenated messages from the same minute?

messageStackSent(time-date, textContent){
	Column (
		messageBubble(
			text: textContent
		),
		message_stack_padding,
		text: time-date,
	)
}


//BUTTON
//exists: components/button.dart refactor to include size variants


//ICON BUTTON
//style, size, hover, disabled


//TEXT INPUT
//exists: components/textfield.dart 

//LIST SELECTOR
//exists: widgets/fee_selector.dart

//NUMERIC KEYPAD
//exists: widgets/numberpad.dart

//CONTACT GROUP
//exists: social/new_message.dart -> buildRecipientsList refactor into a widget

//QR CODE SCANNER
//exists: send2.dart -> startQRScanner() -> showDialog() refactor into a widget (not styled properly)

//PROFILE HEADING






//TEXT
TextSize{
	Name(int)
}

TextWeight{
	Name(int)
}

Alignment{
	Left,
	Center,
	Right
}

CustomText(string: textType, string: text, int: textSize, string: color, alignment: alignment, bool: underline){
	//textType should set defaults that can then be overriden
	return Text(
		text,
		fontSize: textSize,
		color: color,
		alignment: alignment
		underline ? apply underline,
	)
}

<<<<<<< HEAD

=======
RText(text: String, size: TextSize, color: Color = white, Alignment= ALignment::Center, Underline false, overflow = overflow.Ellipses){
	Flexible(
            child: RichText(
        		overflow: TextOverflow.ellipsis,
                    text: TextSpan(
                    text: text,
                    style: (size, color, alignment, underline)),
            ),
    ),
}
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9

//SPACING

Spacing(h: int, w: int) {
	SizedBox(h, w ?? h)
}

//CONSTS

--paddings
const content_padding = 24;
const bumper_padding = 16;
const header_padding = 16;
const list_item_padding = 16;
const message_bubble_padding = [16, 12];
const message_stack_padding = 8;
const button_padding = [16, 12]
const button_padding_sep = [12, 8]


--sizing
const xxl = 96;
const xl = 64;
const lg = 48;
const md = 32;
const sm = 24;

const headingTextSize = 4;
const headingPrimaryTextSize = 3;
const headingMessageTextSize = 5;

// BASIC INTERFACE
Interface(header: Header, content: Content, bumper: Bumper, nav: Option<ModeNav>) {
    return Container(
		child: Column(
			children: [
				header(),
				content(),
				bumper(),
				navBar
			]
		)
	)
}

//HEADER
Header(left, center, right){
	return Container(
		padding: const EdgeInsets.all(header_padding),
		child: Stack (
			Container alignLeft (left),
			Center(center),
			Container alignRight (right),
		)
	)
}

PrimaryHeader(string: text){
	Header(
		center: CustomText(
			textType: heading,
			textSize: headingPrimaryTextSize, 
			text: text
		)
	)
}

MessagesHeader(string: pfp, string: text){
	Header(
		left: SVG(pfp),
		center: CustomText(
			textType: heading,
			textSize: headingPrimaryTextSize, 
			text: text
		)
	)
}

StackHeader(text, onPressed{}, buttonType){
  buttonType default back
	Header(
		right: buttonType = "back" ? backButton(
			onPressed{onPressed}
		) : buttonType = "exit" ? exit(),
		center: CustomText(
			textType: heading,
			textSize: headingTextSize, 
			text: text,
		)
	)
}

StackMessageHeader(profiles[], onBack{}, displayGroup{}){
	Header(
		right: backButton(
			onPressed{onBack}
		),
		center: profiles.length > 1 ? DisplayGroupCenter(profiles) : DisplayProfile(profiles[0])
		left: groupInfo(
			onPressed{displayGroup}
		)
	)
}

StackButton(text, onBack{}, onNext{}){
	Header(
		right: backButton(
			onPressed{onBack}
		),
		center: CustomText(
			textType: heading,
			textSize: headingTextSize, 
			text: text,
		)
		left: button(
      buttonType: "ghost",
      buttonSize: md,
			onPressed{onNext}
		)
	)
}

//DISPLAY PROFILES
DisplayGroupCenter(profiles){
	return Column (
		GroupAvatars(profiles),
		CustomText(
			textType: heading,
			textSize: headingMessageTextSize, 
			text: "Group Message",
		)
	)
}

GroupAvatars(profiles){
	--list cannot be longer than 5
	list = profiles.length > 5 : 5 {
		circle(
			image: Profile.picture
		)
	}
}

DisplayProfile(profile){
	return Column (
		Avatar(profile.picture),
		CustomText(
			textType: heading,
			textSize: headingMessageTextSize, 
			text: profile.name,
		)
	)
}

Avatar(profilePhoto){
	--list cannot be longer than 5
	list = profiles.length > 5 : 5 {
		circle(
			image: profilePhoto
		)
	}
}

//PROFILES

Profile (){
	name: (),
	picture: (),
}


//CONTENT
Content(contentWidget){
	return Container (
		padding: const EdgeInsets.all(content_padding),
		contentWidget,
	)
}

//BUMPER
Bumper(contentWidget) {
	return Container(
	    padding: bumper_padding,
		alignment: Alignment.center,
	    child: contentWidget
	)
}

<<<<<<< HEAD
=======
Header(left, center, right)

Left(icon: icon,) {
	icon,
	onPressed
}

Center(string: Text, icon: icon){
	if(icon == null){
		text
	}else{
		Column(
			text,
			icon
		)
	}
}

Right(string: text, icon: icon){
	if(text){
		text
	}else if(icon){
		icon,
		onPressed
	}
}

//Unique case exists: components/message_appbar.dart


//BTC VALUE
//exists: components/value_display.dart

//unique case: components/keyboard_value_display.dart could be refactored to work with standard BTC VALUE display, however I had difficulties with this before

>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9
//LIST IIEM
//Exists: components/list_item_group.dart -> listItem()

ListItem(left, right){
	Row SpaceBetween(
		left,
		right,
	)
}

//LIST ITEM GROUP
//Exists: components/list_item_group.dart

TransactionHistoryItem(bool: IsReceived, int: Amount, string: Time/Date){
	if IsReceived, TransactionType will be received btc or else sent btc
	Container (
		padding: vertical: list_item_padding,
		child: ListItem(
			left: Column (
				text: TransactionType, 
				text: Time/Date, 
			)
			right: Column (
				text: Amount, 
				text: "Details"
			)
		)
	)
}

<<<<<<< HEAD
MessageItem(string: optional<ProfilePicture>, string: Name, string: MostRecentMessage, bool: _isGroup){
	return child: ListItem(
		left:	profilePicture (
=======

//MESSAGE ITEM
//exists: components/message_item.dart

MessageItem(string: Icon, string: Title, string: Subtitle){
	Container (
		padding: vertical: list_item_padding,
		Row(
			image: Icon,
			list_item_padding,
			Column(
				text: Title,
				text: Subtitle,
			),
		)
	)
}

//MESSAGE ITEM GROUP
//is this supposed to be a message item group?
//exists: components/message_item_group.dart

MessageHistoryItem(string: optional<ProfilePicture>, string: Name, string: MostRecentMessage, bool: group){
	child: MessageItem(
		profilePicture(
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9
			profilePicture: optional<ProfilePicture>, 
			isGroup: _isGroup,
			size: "LG",
		),
		right: Column (
			title,
			Subtitle
		)
	)
}
<<<<<<< HEAD
//TABULAR GROUPS
=======

//TABULAR
//exists: components/tabular_group.dart -> Tabular
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9

Tabular (text: Left, text: Right){
	Row SpaceBetween {
		text: left,
		text: right
	}
}

//TABULAR GROUP
//exists: components/tabular_group.dart

TabularGroup(array-text: dataType, array-text: content){
	listGroup {
		Tabular(dataType[var], content[var])
	}
}

//QR CODE
//receive.dart

//DATA ITEM
//send4.dart, refactor into widget


//TRANSACTION RESULT
//send5.dart, refactor into widget

TransactionResult (transactionType, amount){
	Container Expand (
		alignment: Alignment.center,
		Column (
			children: [
				image: btc_image,
				text: Text("You ${transactionType} ${amount}")
			]
		)
	)
}

//PROFILE PICTURE

profilePicture(string: optional<pfp>, int: size, bool: isGroup){
	if(pfp == null && isGroup) pfp == defaultGroupProfile
	if(pfp == null && isGroup == false) pfp == defaultSingleProfile
	image: Image(
		if(pfp == null && isGroup) pfp == defaultGroupProfile
		if(pfp == null && isGroup == false) pfp == defaultSingleProfile
		pfp,
		width: size,
		height: size,
	)
}

//MESSAGE BUBBLES
//exists: components/message_bubbles.dart

messageBubble(text, isIncoming){
	Container(
		padding: (vertical: message_bubble_padding[0], horizontal: message_bubble_padding[1]),
		color: isIncoming ? bg-secondary : bitcoin
		child: text,
	)
}

<<<<<<< HEAD

--used for incoming messages in a group message
messageStackGroup(senderInfo, time-date, textContent){
=======
//are these concatenated messages from the same minute?

messageStackGroupIncoming(senderInfo, time-date, textContent){
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9
	Row(
		senderInfo.profilePicture,
		message_stack_padding,
		Column (
			messageBubble(
				text: textContent, 
				isIncoming: true,
			),
			message_stack_padding,
			Row (
				senderInfo.name, 
				text: time-date,
			),
		)
	)
}

<<<<<<< HEAD
--used for incoming messages in a direct message and any message that user sends
messageStack(string: time-date, string: textContent, bool: _isIncoming){
=======
//assuming this is non-concatenated?

messageStackSingleIncoming(time-date, textContent){
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9
	Column (
		messageBubble(
			text: CustomText(textContent), 
			isIncoming: _isIncoming
		),
		message_stack_padding,
		text: time-date,
	)
}

<<<<<<< HEAD
//BORDERS

border(string: borderType){
	borderType == "secondaryBorder" {
		Border(
			color: 
			thickness:
		)
	}
}



//BUTTON

button(string: optional<icon>, int: optional<size>, bool: optional<_expand>, string: buttonType, onPressed{}){
	_expand default true
	size default lg
	Row (
		alignment: center,
		icon ? SVG(icon),
		icon ? Spacing(button_padding_sep),
		Container(
			--rounded edges,
			padding: EdgeInsets.all(button_padding),
			height: size,
			width: _expand ? double.infinity : shrinkwraptochild,
			color: buttonType ? bitcoin : backgroundColor : primary,
			border: buttonType == "Secondary" ? border("secondaryBorder") : nothing
		)
	)
  onPressed{onPressed}
}

iconButton(string: icon, bool: _isBitcoin, bool: optional<size>, onPressed){
	size default lg
	_isBitcoin default false
	SVG(
		image: icon,
		color: _isBitcoin ? bitcoin : White
		width: size,
		height: size,
	)
	onPressed{}
}

backButton(onPressed) {
	iconButton(
		icon: leftArrow, 
		onPressed: onPressed
	)
}

groupInfo(onPressed) {
	iconButton(
		icon: info, 
		onPressed: onPressed
	)
}


// SCREENS




--WALLET

WalletHome(myBalance, transactionsList){
  Interface(
    header: PrimaryHeader(
      text: "Wallet"
    ),
    content: Column centered(
      AmountDisplay(
        amount: myBalance,
      ),
      Spacing(content_padding),
      TransactionHistory(
        transactionsList: transactionsList,
      ),
    )
    bumper: DoubleButtonBumper(
      firstButtonText: "Receive", 
      secondButtonText: "Send", 
      firstButtonOnPressed: enterReceiveFlow(), 
      secondButtonOnPressed: enterSendFlow(),
    ),
    nav: ModeNav(
      onWallet: true,
    )
  )
}

Receive(){
  Interface(
    header: StackHeader(
      text: "Receive bitcoin",
      onBack: exitReceiveFlow(),
    ),
    content: Column centered(
      QRCode(),
      Spacing(content_padding),
      CustomText(
        textType: "Text",
        textSize: md,
        text: "Scan to receive bitcoin."
        color: "text-secondary",
      ),
    )
    bumper: Button(
      text: "Share", 
      onPressed: share(),
    ),
  )
}

BitcoinAddress(){
  Interface(
    header: StackHeader(
      text: "Bitcoin address",
      onBack: exitSendFlow(),
    ),
    content: Column centered(
      AddressInput(),
      Spacing(content_padding),
      PasteAddress(recipientAddress),
      Spacing(content_padding),
      CustomText(
        textType: "Text",
        textSize: sm,
        text: "Scan to receive bitcoin."
        color: "text-secondary",
      ),
      Spacing(content_padding),
      ScanQRCode(),
    )
    bumper: Button(
      text: "Continue", 
      enableWhen: AddressInputFilled(), //will return true or false
      onPressed: continueSendAmount(),
    ),
  )
}

SelectAmount(){
  Interface(
    header: StackHeader(
      text: "Send bitcoin",
      onBack: returnAddressInput(),
    ),
    content: Column centered(
      AmountDisplay(
        amount: SelectedAmount(),
      ),
      Spacer(),
      KeyPad()
    )
    bumper: Button(
      text: "Continue", 
      enableWhen: AmountDisplayHasAmount(), //will return true or false
      onPressed: continueTransactionSpeed(),
    ),
  )
}

TransactionSpeed(){
  Interface(
    header: StackHeader(
      text: "Transcation speed",
      onBack: returnSelectAmount(),
    ),
    content: Column centered(
      SelectSpeed ( //default selects option one always
        optionOne: PrioritySpeedSelector(),
        optionTwo: StandardSpeedSelector(),
      )
    )
    bumper: Button(
      text: "Continue",
      onPressed: continueConfirmSend(),
    ),
  )
}

ConfirmSend(receipientAddress, sendAmount){
  Interface(
    header: StackHeader(
      text: "Confirm send",
      onBack: returnTransactionSpeed(),
    ),
    content: Column centered(
      ConfirmAddress(
        address: receipientAddress,
      ),
      ConfirmAmount(
        address: receipientAddress,
        amount: sendAmount,
      )
    )
    bumper: Button(
      text: "Confirm & Send",
      onPressed: sendTransaction(),
    ),
  )
}

SendConfirmed(sendAmount){
  Interface(
    header: StackHeader(
      text: "Confirm send",
      buttonType: "exit",
    ),
    content: Column centered(
      TransactionResult (
        transactionType: "sent", 
        amount: sendAmount,
      )
    )
    bumper: Button(
      text: "Done",
      onPressed: goDashboard(),
    ),
  )
}





----MESSAGES



MessagesHome(){
  Interface(
    header: MessagesHeader(
      text: "Messages",
      pfp: myProfile.picture,
    ),
    content: Column centered(
      _messages ? NoMessages() : MessagesHistory(
        list: messagesList,
      ),
    )
    bumper: Button(
      text: "New Message",
      onPressed: startNewMessageFlow(),
    ),
    nav: ModeNav(
      onMessages: true,
    )
  )
}

newMessage(){
  Interface(
    header: StackButton(
      onBack: myProfile.picture,
      text: "New message",
      onNext: startMessage()
    ),
    content: Column centered(
      UsernameInput(),
      Spacing(content_padding),
      SelectedUsernames(),
      Spacing(content_padding),
      PossibleRecipientsList(),
    )
    bumper: Button(
      text: "New Message",
      onPressed: createNewMessage(),
    ),
  )
}

directMessage(){
  Interface(
    header: StackMessageHeader(
      profiles: recipientProfiles,
      onBack: leaveMessage(),
    ),
    content: Column centered(
      UsernameInput(),
      Spacing(content_padding),
      SelectedUsernames(),
      Spacing(content_padding),
      PossibleRecipientsList(),
    )
    bumper: WriteMessageInput(),
  )
}

=======
//assuming these are concatenated messages from the same minute?

messageStackSent(time-date, textContent){
	Column (
		messageBubble(
			text: textContent
		),
		message_stack_padding,
		text: time-date,
	)
}


//BUTTON
//exists: components/button.dart refactor to include size variants

//unique case: components/receive_send.dart


//ICON BUTTON
//style, size, hover, disabled


//TEXT INPUT
//exists: components/text_input.dart 

//LIST SELECTOR
//exists: components/list_selector.dart

//NUMERIC KEYPAD
//exists: components/numeric_keypad.dart

//CONTACT GROUP
//exists: social/new_message.dart -> buildRecipientsList refactor into a widget

//QR CODE SCANNER
//exists: send2.dart -> startQRScanner() -> showDialog() refactor into a widget (not styled properly)

//PROFILE HEADING

//TAB NAVIGATOR
//exists: components/tab_navigator.dart
>>>>>>> 6bd56b2bd6b61960685c7ffdbb1cc269ef1189d9


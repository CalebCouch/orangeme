// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'pub_structs.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `fmt`

Future<void> test({required ShorthandTransaction s}) =>
    RustLib.instance.api.crateApiPubStructsTest(s: s);

enum KeyPress {
  zero,
  one,
  two,
  three,
  four,
  five,
  six,
  seven,
  eight,
  nine,
  reset,
  decimal,
  backspace,
  ;
}

@freezed
sealed class PageName with _$PageName {
  const PageName._();

  const factory PageName.bitcoinHome() = PageName_BitcoinHome;
  const factory PageName.receive() = PageName_Receive;
  const factory PageName.test(
    String field0,
  ) = PageName_Test;
}

enum Platform {
  mac,
  linux,
  windows,
  ios,
  android,
  fuchsia,
  ;

  bool isDesktop() => RustLib.instance.api.crateApiPubStructsPlatformIsDesktop(
        that: this,
      );
}

class ShorthandTransaction {
  final bool isWithdraw;
  final String date;
  final String time;
  final String usd;
  final String txid;

  const ShorthandTransaction({
    required this.isWithdraw,
    required this.date,
    required this.time,
    required this.usd,
    required this.txid,
  });

  @override
  int get hashCode =>
      isWithdraw.hashCode ^
      date.hashCode ^
      time.hashCode ^
      usd.hashCode ^
      txid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ShorthandTransaction &&
          runtimeType == other.runtimeType &&
          isWithdraw == other.isWithdraw &&
          date == other.date &&
          time == other.time &&
          usd == other.usd &&
          txid == other.txid;
}

@freezed
sealed class Thread with _$Thread {
  const Thread._();

  const factory Thread.wallet(
    WalletMethod field0,
  ) = Thread_Wallet;
}

@freezed
sealed class WalletMethod with _$WalletMethod {
  const WalletMethod._();

  const factory WalletMethod.getNewAddress() = WalletMethod_GetNewAddress;
  const factory WalletMethod.getFees(
    BigInt field0,
    double field1,
  ) = WalletMethod_GetFees;
}

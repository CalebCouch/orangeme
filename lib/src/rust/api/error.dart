// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The functions `source`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `fmt` are not `pub`, thus are ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>
@sealed
class Error extends RustOpaque {
  // Not to be used by end users
  Error.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Error.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Error,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Error,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ErrorPtr,
  );

  static Future<Error> authFailed({required String ctx, required String err}) =>
      RustLib.instance.api.crateApiErrorErrorAuthFailed(ctx: ctx, err: err);

  static Future<Error> badRequest({required String ctx, required String err}) =>
      RustLib.instance.api.crateApiErrorErrorBadRequest(ctx: ctx, err: err);

  static Future<Error> conflict({required String ctx, required String err}) =>
      RustLib.instance.api.crateApiErrorErrorConflict(ctx: ctx, err: err);

  static Future<Error> error({required String ctx, required String err}) =>
      RustLib.instance.api.crateApiErrorErrorError(ctx: ctx, err: err);

  static Future<Error> notFound({required String ctx, required String err}) =>
      RustLib.instance.api.crateApiErrorErrorNotFound(ctx: ctx, err: err);

  static Future<Error> parse({required String rtype, required String data}) =>
      RustLib.instance.api.crateApiErrorErrorParse(rtype: rtype, data: data);
}

// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'structs.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BDKWallet < SqliteDatabase >>>
abstract class BdkWalletSqliteDatabase implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<(DescriptorSet)>>
abstract class DescriptorSet implements RustOpaqueInterface {
  static Future<DescriptorSet> default_() =>
      RustLib.instance.api.crateApiStructsDescriptorSetDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ElectrumBlockchain>>
abstract class ElectrumBlockchain implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PathBuf>>
abstract class PathBuf implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Wallet>>
abstract class Wallet implements RustOpaqueInterface {
  ElectrumBlockchain get blockchain;

  BdkWalletSqliteDatabase get inner;

  set blockchain(ElectrumBlockchain blockchain);

  set inner(BdkWalletSqliteDatabase inner);

  static Future<DescriptorSet> generateDescs({required U8Array64 seed}) =>
      RustLib.instance.api.crateApiWalletWalletGenerateDescs(seed: seed);

  static Future<U8Array64> generateSeed() =>
      RustLib.instance.api.crateApiWalletWalletGenerateSeed();

  Future<List<Transaction>> listTxs();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Wallet> newInstance(
          {required DescriptorSet descriptors, required PathBuf path}) =>
      RustLib.instance.api
          .crateApiWalletWalletNew(descriptors: descriptors, path: path);

  Future<void> sync_();
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array64(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array64.init() : this(Uint8List(arraySize));
}

// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BDKWallet < SqliteDatabase >>>
abstract class BdkWalletSqliteDatabase implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ElectrumBlockchain>>
abstract class ElectrumBlockchain implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PathBuf>>
abstract class PathBuf implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Wallet>>
abstract class Wallet implements RustOpaqueInterface {
  ElectrumBlockchain get blockchain;

  BdkWalletSqliteDatabase get inner;

  set blockchain(ElectrumBlockchain blockchain);

  set inner(BdkWalletSqliteDatabase inner);

  Future<String> getnewaddress();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Wallet> newInstance(
          {required DescriptorSet descriptors, required PathBuf path}) =>
      RustLib.instance.api
          .crateApiWalletWalletNew(descriptors: descriptors, path: path);

  Future<void> sync_();
}

class DescriptorSet {
  final String external_;
  final String internal;

  const DescriptorSet({
    required this.external_,
    required this.internal,
  });

  static Future<DescriptorSet> fromSeed({required Seed seed}) =>
      RustLib.instance.api.crateApiWalletDescriptorSetFromSeed(seed: seed);

  @override
  int get hashCode => external_.hashCode ^ internal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DescriptorSet &&
          runtimeType == other.runtimeType &&
          external_ == other.external_ &&
          internal == other.internal;
}

class Seed {
  final Uint8List inner;

  const Seed({
    required this.inner,
  });

  Future<U8Array64> get_() => RustLib.instance.api.crateApiWalletSeedGet(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Seed> newInstance() =>
      RustLib.instance.api.crateApiWalletSeedNew();

  @override
  int get hashCode => inner.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Seed && runtimeType == other.runtimeType && inner == other.inner;
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array64(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array64.init() : this(Uint8List(arraySize));
}

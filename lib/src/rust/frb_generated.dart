// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Response> responseBadRequest({required String method, dynamic hint});

  Future<Response> responseError({required String message, dynamic hint});

  Future<Response> responseNew(
      {required int status, required String message, dynamic hint});

  Future<void> dropdb(
      {required String path, required String descriptors, dynamic hint});

  Future<Response> invoke(
      {required String method, required List<String> args, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Response> responseBadRequest({required String method, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(method);
        return wire.wire_Response_bad_request(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_response,
        decodeErrorData: null,
      ),
      constMeta: kResponseBadRequestConstMeta,
      argValues: [method],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResponseBadRequestConstMeta => const TaskConstMeta(
        debugName: "Response_bad_request",
        argNames: ["method"],
      );

  @override
  Future<Response> responseError({required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(message);
        return wire.wire_Response_error(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_response,
        decodeErrorData: null,
      ),
      constMeta: kResponseErrorConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResponseErrorConstMeta => const TaskConstMeta(
        debugName: "Response_error",
        argNames: ["message"],
      );

  @override
  Future<Response> responseNew(
      {required int status, required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_i_32(status);
        var arg1 = cst_encode_String(message);
        return wire.wire_Response_new(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_response,
        decodeErrorData: null,
      ),
      constMeta: kResponseNewConstMeta,
      argValues: [status, message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kResponseNewConstMeta => const TaskConstMeta(
        debugName: "Response_new",
        argNames: ["status", "message"],
      );

  @override
  Future<void> dropdb(
      {required String path, required String descriptors, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(path);
        var arg1 = cst_encode_String(descriptors);
        return wire.wire_dropdb(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropdbConstMeta,
      argValues: [path, descriptors],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropdbConstMeta => const TaskConstMeta(
        debugName: "dropdb",
        argNames: ["path", "descriptors"],
      );

  @override
  Future<Response> invoke(
      {required String method, required List<String> args, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(method);
        var arg1 = cst_encode_list_String(args);
        return wire.wire_invoke(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_response,
        decodeErrorData: null,
      ),
      constMeta: kInvokeConstMeta,
      argValues: [method, args],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInvokeConstMeta => const TaskConstMeta(
        debugName: "invoke",
        argNames: ["method", "args"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  Response dco_decode_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Response(
      status: dco_decode_i_32(arr[0]),
      message: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Response sse_decode_response(SseDeserializer deserializer) {
    var var_status = sse_decode_i_32(deserializer);
    var var_message = sse_decode_String(deserializer);
    return Response(status: var_status, message: var_message);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_response(Response self, SseSerializer serializer) {
    sse_encode_i_32(self.status, serializer);
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

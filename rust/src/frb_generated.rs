// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::custom_handler::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.6.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 2021589139;

// Section: executor

pub use crate::api::custom_handler::FLUTTER_RUST_BRIDGE_HANDLER;

// Section: wire_funcs

fn wire__crate__api__custom_handler__MyCustomAsyncRuntime_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "MyCustomAsyncRuntime_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::custom_handler::MyCustomAsyncRuntime::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__clearData_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clearData",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::simple::clearData(api_path)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__getPage_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "getPage",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_page = <crate::api::pub_structs::PageName>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::simple::getPage(api_path, api_page).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__pub_structs__load_structs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_structs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api__s =
                <crate::api::pub_structs::ShorthandTransaction>::sse_decode(&mut deserializer);
            let api__sc =
                <crate::api::pub_structs::ShorthandConversation>::sse_decode(&mut deserializer);
            let api__m = <crate::api::pub_structs::Message>::sse_decode(&mut deserializer);
            let api__p = <crate::api::pub_structs::DartProfile>::sse_decode(&mut deserializer);
            let api__dm = <crate::api::pub_structs::DartMethod>::sse_decode(&mut deserializer);
            let api__kp = <crate::api::pub_structs::KeyPress>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::pub_structs::load_structs(
                            api__s, api__sc, api__m, api__p, api__dm, api__kp,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__pub_structs__load_structs2_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_structs2",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api__pl = <crate::api::pub_structs::Platform>::sse_decode(&mut deserializer);
            let api__pn = <crate::api::pub_structs::PageName>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::pub_structs::load_structs2(api__pl, api__pn);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__pub_structs__platform_is_desktop_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "platform_is_desktop",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pub_structs::Platform>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::pub_structs::Platform::is_desktop(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__rustStart_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rustStart",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_platform = <crate::api::pub_structs::Platform>::sse_decode(&mut deserializer);
            let api_callback = decode_DartFn_Inputs_dart_method_Output_opt_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::simple::rustStart(api_path, api_platform, api_callback)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__utils__update_amount_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_amount",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_amount = <String>::sse_decode(&mut deserializer);
            let api_key = <crate::api::pub_structs::KeyPress>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::utils::update_amount(api_amount, api_key)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_dart_method_Output_opt_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::api::pub_structs::DartMethod) -> flutter_rust_bridge::DartFnFuture<Option<String>>
{
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::pub_structs::DartMethod,
    ) -> Option<String> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<Option<String>>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::api::pub_structs::DartMethod| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for MyCustomAsyncRuntime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::pub_structs::DartMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::DartMethod::StorageSet(var_field0, var_field1);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::DartMethod::StorageGet(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pub_structs::DartProfile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_did = <String>::sse_decode(deserializer);
        let mut var_pfpPath = <Option<String>>::sse_decode(deserializer);
        let mut var_abtMe = <Option<String>>::sse_decode(deserializer);
        return crate::api::pub_structs::DartProfile {
            name: var_name,
            did: var_did,
            pfp_path: var_pfpPath,
            abt_me: var_abtMe,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::pub_structs::KeyPress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pub_structs::KeyPress::Zero,
            1 => crate::api::pub_structs::KeyPress::One,
            2 => crate::api::pub_structs::KeyPress::Two,
            3 => crate::api::pub_structs::KeyPress::Three,
            4 => crate::api::pub_structs::KeyPress::Four,
            5 => crate::api::pub_structs::KeyPress::Five,
            6 => crate::api::pub_structs::KeyPress::Six,
            7 => crate::api::pub_structs::KeyPress::Seven,
            8 => crate::api::pub_structs::KeyPress::Eight,
            9 => crate::api::pub_structs::KeyPress::Nine,
            10 => crate::api::pub_structs::KeyPress::Reset,
            11 => crate::api::pub_structs::KeyPress::Decimal,
            12 => crate::api::pub_structs::KeyPress::Backspace,
            _ => unreachable!("Invalid variant for KeyPress: {}", inner),
        };
    }
}

impl SseDecode for Vec<crate::api::pub_structs::DartProfile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pub_structs::DartProfile>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::pub_structs::Message {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sender = <crate::api::pub_structs::DartProfile>::sse_decode(deserializer);
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_date = <String>::sse_decode(deserializer);
        let mut var_time = <String>::sse_decode(deserializer);
        let mut var_isIncoming = <bool>::sse_decode(deserializer);
        return crate::api::pub_structs::Message {
            sender: var_sender,
            message: var_message,
            date: var_date,
            time: var_time,
            is_incoming: var_isIncoming,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::pub_structs::PageName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pub_structs::PageName::BitcoinHome;
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::ViewTransaction(var_field0);
            }
            2 => {
                return crate::api::pub_structs::PageName::Receive;
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Send(var_field0);
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Amount(var_field0);
            }
            5 => {
                let mut var_field0 = <u64>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Speed(var_field0);
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <u64>::sse_decode(deserializer);
                let mut var_field2 = <u64>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Confirm(
                    var_field0, var_field1, var_field2,
                );
            }
            7 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Success(var_field0);
            }
            8 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::MyProfile(var_field0);
            }
            9 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                let mut var_field1 =
                    <crate::api::pub_structs::DartProfile>::sse_decode(deserializer);
                let mut var_field2 = <bool>::sse_decode(deserializer);
                let mut var_field3 = <bool>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::UserProfile(
                    var_field0, var_field1, var_field2, var_field3,
                );
            }
            10 => {
                return crate::api::pub_structs::PageName::MessagesHome;
            }
            11 => {
                return crate::api::pub_structs::PageName::ChooseRecipient;
            }
            12 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <Option<String>>::sse_decode(deserializer);
                let mut var_field2 =
                    <Vec<crate::api::pub_structs::DartProfile>>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::CurrentConversation(
                    var_field0, var_field1, var_field2,
                );
            }
            13 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::ConversationInfo(var_field0);
            }
            14 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pub_structs::PageName::Test(var_field0);
            }
            15 => {
                return crate::api::pub_structs::PageName::Scan;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pub_structs::Platform {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pub_structs::Platform::Mac,
            1 => crate::api::pub_structs::Platform::Linux,
            2 => crate::api::pub_structs::Platform::Windows,
            3 => crate::api::pub_structs::Platform::IOS,
            4 => crate::api::pub_structs::Platform::Android,
            5 => crate::api::pub_structs::Platform::Fuchsia,
            _ => unreachable!("Invalid variant for Platform: {}", inner),
        };
    }
}

impl SseDecode for (String, bool, u8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <bool>::sse_decode(deserializer);
        let mut var_field2 = <u8>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for crate::api::pub_structs::ShorthandConversation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_roomName = <String>::sse_decode(deserializer);
        let mut var_photo = <Option<String>>::sse_decode(deserializer);
        let mut var_subtext = <String>::sse_decode(deserializer);
        let mut var_isGroup = <bool>::sse_decode(deserializer);
        let mut var_roomId = <String>::sse_decode(deserializer);
        return crate::api::pub_structs::ShorthandConversation {
            room_name: var_roomName,
            photo: var_photo,
            subtext: var_subtext,
            is_group: var_isGroup,
            room_id: var_roomId,
        };
    }
}

impl SseDecode for crate::api::pub_structs::ShorthandTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_isWithdraw = <bool>::sse_decode(deserializer);
        let mut var_datetime = <String>::sse_decode(deserializer);
        let mut var_amount = <String>::sse_decode(deserializer);
        let mut var_txid = <String>::sse_decode(deserializer);
        return crate::api::pub_structs::ShorthandTransaction {
            is_withdraw: var_isWithdraw,
            datetime: var_datetime,
            amount: var_amount,
            txid: var_txid,
        };
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__custom_handler__MyCustomAsyncRuntime_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__simple__clearData_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__simple__getPage_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__pub_structs__load_structs_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__pub_structs__load_structs2_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__simple__rustStart_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__utils__update_amount_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        6 => wire__crate__api__pub_structs__platform_is_desktop_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<MyCustomAsyncRuntime> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<MyCustomAsyncRuntime>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MyCustomAsyncRuntime>> for MyCustomAsyncRuntime {
    fn into_into_dart(self) -> FrbWrapper<MyCustomAsyncRuntime> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::DartMethod {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pub_structs::DartMethod::StorageSet(field0, field1) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pub_structs::DartMethod::StorageGet(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::DartMethod
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::DartMethod>
    for crate::api::pub_structs::DartMethod
{
    fn into_into_dart(self) -> crate::api::pub_structs::DartMethod {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::DartProfile {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.did.into_into_dart().into_dart(),
            self.pfp_path.into_into_dart().into_dart(),
            self.abt_me.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::DartProfile
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::DartProfile>
    for crate::api::pub_structs::DartProfile
{
    fn into_into_dart(self) -> crate::api::pub_structs::DartProfile {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::KeyPress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Zero => 0.into_dart(),
            Self::One => 1.into_dart(),
            Self::Two => 2.into_dart(),
            Self::Three => 3.into_dart(),
            Self::Four => 4.into_dart(),
            Self::Five => 5.into_dart(),
            Self::Six => 6.into_dart(),
            Self::Seven => 7.into_dart(),
            Self::Eight => 8.into_dart(),
            Self::Nine => 9.into_dart(),
            Self::Reset => 10.into_dart(),
            Self::Decimal => 11.into_dart(),
            Self::Backspace => 12.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::KeyPress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::KeyPress>
    for crate::api::pub_structs::KeyPress
{
    fn into_into_dart(self) -> crate::api::pub_structs::KeyPress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::Message {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.sender.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.date.into_into_dart().into_dart(),
            self.time.into_into_dart().into_dart(),
            self.is_incoming.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::Message
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::Message>
    for crate::api::pub_structs::Message
{
    fn into_into_dart(self) -> crate::api::pub_structs::Message {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::PageName {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pub_structs::PageName::BitcoinHome => [0.into_dart()].into_dart(),
            crate::api::pub_structs::PageName::ViewTransaction(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Receive => [2.into_dart()].into_dart(),
            crate::api::pub_structs::PageName::Send(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Amount(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Speed(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Confirm(field0, field1, field2) => [
                6.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pub_structs::PageName::Success(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::MyProfile(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::UserProfile(field0, field1, field2, field3) => [
                9.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
                field3.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pub_structs::PageName::MessagesHome => [10.into_dart()].into_dart(),
            crate::api::pub_structs::PageName::ChooseRecipient => [11.into_dart()].into_dart(),
            crate::api::pub_structs::PageName::CurrentConversation(field0, field1, field2) => [
                12.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pub_structs::PageName::ConversationInfo(field0) => {
                [13.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Test(field0) => {
                [14.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pub_structs::PageName::Scan => [15.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::PageName
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::PageName>
    for crate::api::pub_structs::PageName
{
    fn into_into_dart(self) -> crate::api::pub_structs::PageName {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::Platform {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Mac => 0.into_dart(),
            Self::Linux => 1.into_dart(),
            Self::Windows => 2.into_dart(),
            Self::IOS => 3.into_dart(),
            Self::Android => 4.into_dart(),
            Self::Fuchsia => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::Platform
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::Platform>
    for crate::api::pub_structs::Platform
{
    fn into_into_dart(self) -> crate::api::pub_structs::Platform {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::ShorthandConversation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.room_name.into_into_dart().into_dart(),
            self.photo.into_into_dart().into_dart(),
            self.subtext.into_into_dart().into_dart(),
            self.is_group.into_into_dart().into_dart(),
            self.room_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::ShorthandConversation
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::ShorthandConversation>
    for crate::api::pub_structs::ShorthandConversation
{
    fn into_into_dart(self) -> crate::api::pub_structs::ShorthandConversation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::ShorthandTransaction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.is_withdraw.into_into_dart().into_dart(),
            self.datetime.into_into_dart().into_dart(),
            self.amount.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pub_structs::ShorthandTransaction
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::ShorthandTransaction>
    for crate::api::pub_structs::ShorthandTransaction
{
    fn into_into_dart(self) -> crate::api::pub_structs::ShorthandTransaction {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for MyCustomAsyncRuntime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::pub_structs::DartMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pub_structs::DartMethod::StorageSet(field0, field1) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::api::pub_structs::DartMethod::StorageGet(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::pub_structs::DartProfile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.did, serializer);
        <Option<String>>::sse_encode(self.pfp_path, serializer);
        <Option<String>>::sse_encode(self.abt_me, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_i64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::pub_structs::KeyPress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pub_structs::KeyPress::Zero => 0,
                crate::api::pub_structs::KeyPress::One => 1,
                crate::api::pub_structs::KeyPress::Two => 2,
                crate::api::pub_structs::KeyPress::Three => 3,
                crate::api::pub_structs::KeyPress::Four => 4,
                crate::api::pub_structs::KeyPress::Five => 5,
                crate::api::pub_structs::KeyPress::Six => 6,
                crate::api::pub_structs::KeyPress::Seven => 7,
                crate::api::pub_structs::KeyPress::Eight => 8,
                crate::api::pub_structs::KeyPress::Nine => 9,
                crate::api::pub_structs::KeyPress::Reset => 10,
                crate::api::pub_structs::KeyPress::Decimal => 11,
                crate::api::pub_structs::KeyPress::Backspace => 12,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<crate::api::pub_structs::DartProfile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pub_structs::DartProfile>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::pub_structs::Message {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pub_structs::DartProfile>::sse_encode(self.sender, serializer);
        <String>::sse_encode(self.message, serializer);
        <String>::sse_encode(self.date, serializer);
        <String>::sse_encode(self.time, serializer);
        <bool>::sse_encode(self.is_incoming, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::pub_structs::PageName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pub_structs::PageName::BitcoinHome => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pub_structs::PageName::ViewTransaction(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Receive => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::pub_structs::PageName::Send(field0) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Amount(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Speed(field0) => {
                <i32>::sse_encode(5, serializer);
                <u64>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Confirm(field0, field1, field2) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
                <u64>::sse_encode(field1, serializer);
                <u64>::sse_encode(field2, serializer);
            }
            crate::api::pub_structs::PageName::Success(field0) => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::MyProfile(field0) => {
                <i32>::sse_encode(8, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::UserProfile(field0, field1, field2, field3) => {
                <i32>::sse_encode(9, serializer);
                <bool>::sse_encode(field0, serializer);
                <crate::api::pub_structs::DartProfile>::sse_encode(field1, serializer);
                <bool>::sse_encode(field2, serializer);
                <bool>::sse_encode(field3, serializer);
            }
            crate::api::pub_structs::PageName::MessagesHome => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::pub_structs::PageName::ChooseRecipient => {
                <i32>::sse_encode(11, serializer);
            }
            crate::api::pub_structs::PageName::CurrentConversation(field0, field1, field2) => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(field0, serializer);
                <Option<String>>::sse_encode(field1, serializer);
                <Vec<crate::api::pub_structs::DartProfile>>::sse_encode(field2, serializer);
            }
            crate::api::pub_structs::PageName::ConversationInfo(field0) => {
                <i32>::sse_encode(13, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Test(field0) => {
                <i32>::sse_encode(14, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pub_structs::PageName::Scan => {
                <i32>::sse_encode(15, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::pub_structs::Platform {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pub_structs::Platform::Mac => 0,
                crate::api::pub_structs::Platform::Linux => 1,
                crate::api::pub_structs::Platform::Windows => 2,
                crate::api::pub_structs::Platform::IOS => 3,
                crate::api::pub_structs::Platform::Android => 4,
                crate::api::pub_structs::Platform::Fuchsia => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for (String, bool, u8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <bool>::sse_encode(self.1, serializer);
        <u8>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for crate::api::pub_structs::ShorthandConversation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.room_name, serializer);
        <Option<String>>::sse_encode(self.photo, serializer);
        <String>::sse_encode(self.subtext, serializer);
        <bool>::sse_encode(self.is_group, serializer);
        <String>::sse_encode(self.room_id, serializer);
    }
}

impl SseEncode for crate::api::pub_structs::ShorthandTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_withdraw, serializer);
        <String>::sse_encode(self.datetime, serializer);
        <String>::sse_encode(self.amount, serializer);
        <String>::sse_encode(self.txid, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use crate::api::custom_handler::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use crate::api::custom_handler::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

#![allow(
non_camel_case_types,
unused,
non_snake_case,
clippy::needless_return,
clippy::redundant_closure_call,
clippy::redundant_closure,
clippy::useless_conversion,
clippy::unit_arg,
clippy::unused_unit,
clippy::double_parens,
clippy::let_and_return,
clippy::too_many_arguments,
clippy::match_single_binding,
clippy::clone_on_copy,
clippy::let_unit_value,
clippy::deref_addrof,
clippy::explicit_auto_deref,
clippy::borrow_deref_ref,
clippy::needless_borrow
)]

// Section: imports

use crate::*;
use crate::api::custom_handler::*;
use crate::api::error::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
                    default_stream_sink_codec = SseCodec,
                    default_rust_opaque = RustOpaqueMoi,
                    default_rust_auto_opaque = RustAutoOpaqueMoi,
                );
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.6.0";
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 209611553;
            

// Section: executor

pub use crate::api::custom_handler::FLUTTER_RUST_BRIDGE_HANDLER;

// Section: wire_funcs

fn wire__crate__api__error__Error_auth_failed_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_auth_failed", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ctx = <String>::sse_decode(&mut deserializer);
let api_err = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::auth_failed(&api_ctx, &api_err))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__error__Error_bad_request_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_bad_request", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ctx = <String>::sse_decode(&mut deserializer);
let api_err = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::bad_request(&api_ctx, &api_err))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__error__Error_conflict_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_conflict", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ctx = <String>::sse_decode(&mut deserializer);
let api_err = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::conflict(&api_ctx, &api_err))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__error__Error_err_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_err", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ctx = <String>::sse_decode(&mut deserializer);
let api_err = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::err(&api_ctx, &api_err))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__error__Error_not_found_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_not_found", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ctx = <String>::sse_decode(&mut deserializer);
let api_err = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::not_found(&api_ctx, &api_err))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__error__Error_parse_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Error_parse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_rtype = <String>::sse_decode(&mut deserializer);
let api_data = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::error::Error::parse(&api_rtype, &api_data))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__custom_handler__MyCustomAsyncRuntime_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MyCustomAsyncRuntime_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::custom_handler::MyCustomAsyncRuntime::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__simple__broadcastTx_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "broadcastTx", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::broadcastTx(api_path).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__pub_structs__field_into_bytes_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "field_into_bytes", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pub_structs::Field>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::api::pub_structs::Field::into_bytes(&api_that))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__api__simple__format_transaction_date_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "format_transaction_date", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_date = <String>::sse_decode(&mut deserializer);
let api_time = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::simple::format_transaction_date(api_date, api_time))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__api__simple__getpage_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "getpage", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_page = <crate::api::pub_structs::PageName>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::getpage(api_path, api_page).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__ruststart_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ruststart", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_platform = <String>::sse_decode(&mut deserializer);
let api_thread = decode_DartFn_Inputs_String_Output_String_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::ruststart(api_path, api_platform, api_thread).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__setStateAddress_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setStateAddress", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_address = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::setStateAddress(api_path, api_address).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__setStateBtc_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setStateBtc", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_btc = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::setStateBtc(api_path, api_btc).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__setStateConversation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setStateConversation", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_index = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::setStateConversation(api_path, api_index).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__setStatePriority_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setStatePriority", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_index = <u8>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::setStatePriority(api_path, api_index).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__setstate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "setstate", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_field = <crate::api::pub_structs::Field>::sse_decode(&mut deserializer);
let api_data = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::setstate(api_path, api_field, api_data).await)?;   Ok(output_ok)
                    })().await)
                } })
            }fn wire__crate__api__simple__updateDisplayAmount_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "updateDisplayAmount", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
let api_input = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(crate::api::simple::updateDisplayAmount(api_path, &api_input).await)?;   Ok(output_ok)
                    })().await)
                } })
            }

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
                    dart_opaque: flutter_rust_bridge::DartOpaque,
                ) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
                    use flutter_rust_bridge::IntoDart;

                    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
                        let args = vec![arg0.into_into_dart().into_dart(),];
                        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

                        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                        let action = deserializer.cursor.read_u8().unwrap();
                        let ans = match action {
                            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
                            1 => std::result::Result::Err(<flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer)),
                            _ => unreachable!(),
                        };
                        deserializer.end();
                        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");ans
                    }

                    move |arg0: String| {
                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
                            dart_opaque.clone(), arg0
                        ))
                    }
                }flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>);


// Section: dart2rust


                impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);}
                }
                
                impl SseDecode for Conversation {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for MyCustomAsyncRuntime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for Profile {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for Transaction {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for flutter_rust_bridge::DartOpaque {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();}
                }
                
                impl SseDecode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap() != 0}
                }
                
                impl SseDecode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_f64::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for crate::api::pub_structs::Field {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { return crate::api::pub_structs::Field::Identity; }
1 => { return crate::api::pub_structs::Field::LegacySeed; }
2 => { return crate::api::pub_structs::Field::DescriptorSet; }
3 => { return crate::api::pub_structs::Field::Internet; }
4 => { return crate::api::pub_structs::Field::Platform; }
5 => { let mut var_field0 = <Option<Profile>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Profile(var_field0); }
6 => { let mut var_field0 = <Option<String>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Address(var_field0); }
7 => { let mut var_field0 = <Option<String>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Amount(var_field0); }
8 => { let mut var_field0 = <Option<u8>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Priority(var_field0); }
9 => { let mut var_field0 = <Option<String>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::AmountErr(var_field0); }
10 => { let mut var_field0 = <Option<f64>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::AmountBTC(var_field0); }
11 => { let mut var_field0 = <Option<String>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Decimals(var_field0); }
12 => { let mut var_field0 = <Option<bool>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::InputValidation(var_field0); }
13 => { let mut var_field0 = <Option<f64>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Price(var_field0); }
14 => { return crate::api::pub_structs::Field::Path; }
15 => { let mut var_field0 = <Option<f64>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Balance(var_field0); }
16 => { let mut var_field0 = <Option<Conversation>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::CurrentConversation(var_field0); }
17 => { let mut var_field0 = <Option<Vec<Conversation>>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Conversations(var_field0); }
18 => { let mut var_field0 = <Option<Vec<Profile>>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Users(var_field0); }
19 => { let mut var_field0 = <Option<Vec<Transaction>>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::Transactions(var_field0); }
20 => { let mut var_field0 = <Option<Transaction>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::CurrentTx(var_field0); }
21 => { let mut var_field0 = <Option< Transaction>>::sse_decode(deserializer);
return crate::api::pub_structs::Field::CurrentRawTx(var_field0); }
 _ => { unimplemented!(""); }}}
                }
                
                impl SseDecode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i32::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for isize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _}
                }
                
                impl SseDecode for Vec<Conversation> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<Conversation>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<Profile> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<Profile>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<Transaction> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<Transaction>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<String>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Conversation> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Conversation>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Profile> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Profile>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Transaction> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Transaction>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<bool> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<bool>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<f64> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<f64>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<u8>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Vec<Conversation>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<Conversation>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Vec<Profile>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<Profile>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Vec<Transaction>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<Transaction>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for crate::api::pub_structs::PageName {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pub_structs::PageName::BitcoinHome,
1 => crate::api::pub_structs::PageName::Receive,
2 => crate::api::pub_structs::PageName::Send,
3 => crate::api::pub_structs::PageName::ScanQR,
4 => crate::api::pub_structs::PageName::Amount,
5 => crate::api::pub_structs::PageName::Speed,
6 => crate::api::pub_structs::PageName::ConfirmTransaction,
7 => crate::api::pub_structs::PageName::Success,
8 => crate::api::pub_structs::PageName::ViewTransaction,
9 => crate::api::pub_structs::PageName::MessagesHome,
10 => crate::api::pub_structs::PageName::Exchange,
11 => crate::api::pub_structs::PageName::MyProfile,
12 => crate::api::pub_structs::PageName::UserProfile,
13 => crate::api::pub_structs::PageName::ConvoInfo,
14 => crate::api::pub_structs::PageName::ChooseRecipient,
15 => crate::api::pub_structs::PageName::Test,
            _ => unreachable!("Invalid variant for PageName: {}", inner),
        };}
                }
                
                impl SseDecode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap()}
                }
                
                impl SseDecode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
                }
                
                impl SseDecode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _}
                }
                
                fn pde_ffi_dispatcher_primary_impl(
                    func_id: i32,port: flutter_rust_bridge::for_generated::MessagePort,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                )  {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        1 => wire__crate__api__error__Error_auth_failed_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__api__error__Error_bad_request_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__api__error__Error_conflict_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__api__error__Error_err_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__api__error__Error_not_found_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crate__api__error__Error_parse_impl(port, ptr, rust_vec_len, data_len),
7 => wire__crate__api__custom_handler__MyCustomAsyncRuntime_default_impl(port, ptr, rust_vec_len, data_len),
8 => wire__crate__api__simple__broadcastTx_impl(port, ptr, rust_vec_len, data_len),
9 => wire__crate__api__pub_structs__field_into_bytes_impl(port, ptr, rust_vec_len, data_len),
11 => wire__crate__api__simple__getpage_impl(port, ptr, rust_vec_len, data_len),
12 => wire__crate__api__simple__ruststart_impl(port, ptr, rust_vec_len, data_len),
13 => wire__crate__api__simple__setStateAddress_impl(port, ptr, rust_vec_len, data_len),
14 => wire__crate__api__simple__setStateBtc_impl(port, ptr, rust_vec_len, data_len),
15 => wire__crate__api__simple__setStateConversation_impl(port, ptr, rust_vec_len, data_len),
16 => wire__crate__api__simple__setStatePriority_impl(port, ptr, rust_vec_len, data_len),
17 => wire__crate__api__simple__setstate_impl(port, ptr, rust_vec_len, data_len),
18 => wire__crate__api__simple__updateDisplayAmount_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                
                fn pde_ffi_dispatcher_sync_impl(
                    func_id: i32,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        10 => wire__crate__api__simple__format_transaction_date_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                

// Section: rust2dart


                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Conversation> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Conversation> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Conversation>> for Conversation {
            fn into_into_dart(self) -> FrbWrapper<Conversation> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Error> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Error> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Error>> for Error {
            fn into_into_dart(self) -> FrbWrapper<Error> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<MyCustomAsyncRuntime> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MyCustomAsyncRuntime> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MyCustomAsyncRuntime>> for MyCustomAsyncRuntime {
            fn into_into_dart(self) -> FrbWrapper<MyCustomAsyncRuntime> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Profile> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Profile> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Profile>> for Profile {
            fn into_into_dart(self) -> FrbWrapper<Profile> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Transaction> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Transaction> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Transaction>> for Transaction {
            fn into_into_dart(self) -> FrbWrapper<Transaction> {
                self.into()
            }
        }

                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::Field {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pub_structs::Field::Identity => { [0.into_dart()].into_dart() }
crate::api::pub_structs::Field::LegacySeed => { [1.into_dart()].into_dart() }
crate::api::pub_structs::Field::DescriptorSet => { [2.into_dart()].into_dart() }
crate::api::pub_structs::Field::Internet => { [3.into_dart()].into_dart() }
crate::api::pub_structs::Field::Platform => { [4.into_dart()].into_dart() }
crate::api::pub_structs::Field::Profile(field0) => { [5.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Address(field0) => { [6.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Amount(field0) => { [7.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Priority(field0) => { [8.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::AmountErr(field0) => { [9.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::AmountBTC(field0) => { [10.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Decimals(field0) => { [11.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::InputValidation(field0) => { [12.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Price(field0) => { [13.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Path => { [14.into_dart()].into_dart() }
crate::api::pub_structs::Field::Balance(field0) => { [15.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::CurrentConversation(field0) => { [16.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Conversations(field0) => { [17.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Users(field0) => { [18.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::Transactions(field0) => { [19.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::CurrentTx(field0) => { [20.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pub_structs::Field::CurrentRawTx(field0) => { [21.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pub_structs::Field {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::Field> for crate::api::pub_structs::Field {
            fn into_into_dart(self) -> crate::api::pub_structs::Field {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::api::pub_structs::PageName {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::BitcoinHome => 0.into_dart(),
Self::Receive => 1.into_dart(),
Self::Send => 2.into_dart(),
Self::ScanQR => 3.into_dart(),
Self::Amount => 4.into_dart(),
Self::Speed => 5.into_dart(),
Self::ConfirmTransaction => 6.into_dart(),
Self::Success => 7.into_dart(),
Self::ViewTransaction => 8.into_dart(),
Self::MessagesHome => 9.into_dart(),
Self::Exchange => 10.into_dart(),
Self::MyProfile => 11.into_dart(),
Self::UserProfile => 12.into_dart(),
Self::ConvoInfo => 13.into_dart(),
Self::ChooseRecipient => 14.into_dart(),
Self::Test => 15.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pub_structs::PageName {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pub_structs::PageName> for crate::api::pub_structs::PageName {
            fn into_into_dart(self) -> crate::api::pub_structs::PageName {
                self
            }
        }

                impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(format!("{:?}", self), serializer);}
                }
                
                impl SseEncode for Conversation {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for MyCustomAsyncRuntime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for Profile {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for Transaction {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for flutter_rust_bridge::DartOpaque {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.encode(), serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<u8>>::sse_encode(self.into_bytes(), serializer);}
                }
                
                impl SseEncode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self as _).unwrap();}
                }
                
                impl SseEncode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_f64::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for crate::api::pub_structs::Field {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pub_structs::Field::Identity => { <i32>::sse_encode(0, serializer);  }
crate::api::pub_structs::Field::LegacySeed => { <i32>::sse_encode(1, serializer);  }
crate::api::pub_structs::Field::DescriptorSet => { <i32>::sse_encode(2, serializer);  }
crate::api::pub_structs::Field::Internet => { <i32>::sse_encode(3, serializer);  }
crate::api::pub_structs::Field::Platform => { <i32>::sse_encode(4, serializer);  }
crate::api::pub_structs::Field::Profile(field0) => { <i32>::sse_encode(5, serializer); <Option<Profile>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Address(field0) => { <i32>::sse_encode(6, serializer); <Option<String>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Amount(field0) => { <i32>::sse_encode(7, serializer); <Option<String>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Priority(field0) => { <i32>::sse_encode(8, serializer); <Option<u8>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::AmountErr(field0) => { <i32>::sse_encode(9, serializer); <Option<String>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::AmountBTC(field0) => { <i32>::sse_encode(10, serializer); <Option<f64>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Decimals(field0) => { <i32>::sse_encode(11, serializer); <Option<String>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::InputValidation(field0) => { <i32>::sse_encode(12, serializer); <Option<bool>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Price(field0) => { <i32>::sse_encode(13, serializer); <Option<f64>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Path => { <i32>::sse_encode(14, serializer);  }
crate::api::pub_structs::Field::Balance(field0) => { <i32>::sse_encode(15, serializer); <Option<f64>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::CurrentConversation(field0) => { <i32>::sse_encode(16, serializer); <Option<Conversation>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Conversations(field0) => { <i32>::sse_encode(17, serializer); <Option<Vec<Conversation>>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Users(field0) => { <i32>::sse_encode(18, serializer); <Option<Vec<Profile>>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::Transactions(field0) => { <i32>::sse_encode(19, serializer); <Option<Vec<Transaction>>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::CurrentTx(field0) => { <i32>::sse_encode(20, serializer); <Option<Transaction>>::sse_encode(field0, serializer);
 }
crate::api::pub_structs::Field::CurrentRawTx(field0) => { <i32>::sse_encode(21, serializer); <Option< Transaction>>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}}
                }
                
                impl SseEncode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i32::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for isize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i64::<NativeEndian>(self as _).unwrap();}
                }
                
                impl SseEncode for Vec<Conversation> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <Conversation>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<Profile> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <Profile>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<Transaction> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <Transaction>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <u8>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <String>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Conversation> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Conversation>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Profile> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Profile>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Transaction> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Transaction>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<bool> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <bool>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<f64> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <f64>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <u8>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Vec<Conversation>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<Conversation>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Vec<Profile>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<Profile>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Vec<Transaction>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<Transaction>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for crate::api::pub_structs::PageName {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::api::pub_structs::PageName::BitcoinHome => { 0 }
crate::api::pub_structs::PageName::Receive => { 1 }
crate::api::pub_structs::PageName::Send => { 2 }
crate::api::pub_structs::PageName::ScanQR => { 3 }
crate::api::pub_structs::PageName::Amount => { 4 }
crate::api::pub_structs::PageName::Speed => { 5 }
crate::api::pub_structs::PageName::ConfirmTransaction => { 6 }
crate::api::pub_structs::PageName::Success => { 7 }
crate::api::pub_structs::PageName::ViewTransaction => { 8 }
crate::api::pub_structs::PageName::MessagesHome => { 9 }
crate::api::pub_structs::PageName::Exchange => { 10 }
crate::api::pub_structs::PageName::MyProfile => { 11 }
crate::api::pub_structs::PageName::UserProfile => { 12 }
crate::api::pub_structs::PageName::ConvoInfo => { 13 }
crate::api::pub_structs::PageName::ChooseRecipient => { 14 }
crate::api::pub_structs::PageName::Test => { 15 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self).unwrap();}
                }
                
                impl SseEncode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();}
                }
                


        
        
        #[cfg(not(target_family = "wasm"))]
        mod io {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.



// Section: imports

use crate::*;
use crate::api::custom_handler::*;
use crate::api::error::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversation(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversation(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProfile(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProfile(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_orange_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(not(target_family = "wasm"))]
        pub use io::*;
        
        
        /// cbindgen:ignore
        #[cfg(target_family = "wasm")]
        mod web {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.



// Section: imports

use crate::*;
use crate::api::custom_handler::*;
use crate::api::error::*;use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;
                use flutter_rust_bridge::for_generated::wasm_bindgen;
                use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;


// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversation(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversation(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Conversation>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyCustomAsyncRuntime(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyCustomAsyncRuntime>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProfile(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProfile(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Profile>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransaction(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transaction>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(target_family = "wasm")]
        pub use web::*;
        
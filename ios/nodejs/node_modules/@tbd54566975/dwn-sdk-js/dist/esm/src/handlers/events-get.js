var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventsGet } from '../interfaces/events-get.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { authenticate, authorizeOwner } from '../core/auth.js';
export class EventsGetHandler {
    constructor(didResolver, eventLog) {
        this.didResolver = didResolver;
        this.eventLog = eventLog;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let eventsGet;
            try {
                eventsGet = yield EventsGet.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            try {
                yield authenticate(message.authorization, this.didResolver);
                yield authorizeOwner(tenant, eventsGet);
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // if a cursor was provided in message, get all events _after_ the cursor.
            // Otherwise, get all events.
            const { cursor: queryCursor } = message.descriptor;
            const { events, cursor } = yield this.eventLog.getEvents(tenant, queryCursor);
            return {
                status: { code: 200, detail: 'OK' },
                entries: events,
                cursor
            };
        });
    }
}
//# sourceMappingURL=events-get.js.map
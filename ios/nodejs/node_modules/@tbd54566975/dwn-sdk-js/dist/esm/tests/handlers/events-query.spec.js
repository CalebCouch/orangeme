var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Dwn } from '../../src/index.js';
import { EventsQueryHandler } from '../../src/handlers/events-query.js';
import { expect } from 'chai';
import { TestDataGenerator } from '../utils/test-data-generator.js';
import { TestEventStream } from '../test-event-stream.js';
import { TestStores } from '../test-stores.js';
import { DidKey, UniversalResolver } from '@web5/dids';
export function testEventsQueryHandler() {
    describe('EventsQueryHandler.handle()', () => {
        let didResolver;
        let messageStore;
        let dataStore;
        let eventLog;
        let eventStream;
        let dwn;
        // important to follow the `before` and `after` pattern to initialize and clean the stores in tests
        // so that different test suites can reuse the same backend store for testing
        before(() => __awaiter(this, void 0, void 0, function* () {
            didResolver = new UniversalResolver({ didResolvers: [DidKey] });
            const stores = TestStores.get();
            messageStore = stores.messageStore;
            dataStore = stores.dataStore;
            eventLog = stores.eventLog;
            eventStream = TestEventStream.get();
            dwn = yield Dwn.create({ didResolver, messageStore, dataStore, eventLog, eventStream });
        }));
        beforeEach(() => __awaiter(this, void 0, void 0, function* () {
            // clean up before each test rather than after so that a test does not depend on other tests to do the clean up
            yield messageStore.clear();
            yield dataStore.clear();
            yield eventLog.clear();
        }));
        after(() => __awaiter(this, void 0, void 0, function* () {
            yield dwn.close();
        }));
        it('returns a 401 if tenant is not author', () => __awaiter(this, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generateDidKeyPersona();
            const bob = yield TestDataGenerator.generateDidKeyPersona();
            const { message } = yield TestDataGenerator.generateEventsQuery({
                author: alice,
                filters: [{ schema: 'schema1' }]
            });
            const eventsQueryHandler = new EventsQueryHandler(didResolver, eventLog);
            const reply = yield eventsQueryHandler.handle({ tenant: bob.did, message });
            expect(reply.status.code).to.equal(401);
            expect(reply.entries).to.not.exist;
        }));
        it('returns a 400 if message is invalid', () => __awaiter(this, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generateDidKeyPersona();
            const { message } = yield TestDataGenerator.generateEventsQuery({
                author: alice,
                filters: [{ schema: 'schema1' }]
            });
            message['descriptor']['troll'] = 'hehe';
            const eventsQueryHandler = new EventsQueryHandler(didResolver, eventLog);
            const reply = yield eventsQueryHandler.handle({ tenant: alice.did, message });
            expect(reply.status.code).to.equal(400);
            expect(reply.entries).to.not.exist;
        }));
        it('returns 400 if no filters are provided', () => __awaiter(this, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generateDidKeyPersona();
            const { message } = yield TestDataGenerator.generateEventsQuery({
                author: alice,
                filters: [{ schema: 'schema1' }],
            }); // create with filter to prevent failure on .create()
            message.descriptor.filters = []; // remove filters
            const eventsQueryHandler = new EventsQueryHandler(didResolver, eventLog);
            const reply = yield eventsQueryHandler.handle({ tenant: alice.did, message });
            expect(reply.status.code).to.equal(400);
            expect(reply.entries).to.not.exist;
        }));
        it('returns 400 if an empty filter without properties is provided', () => __awaiter(this, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generateDidKeyPersona();
            const { message } = yield TestDataGenerator.generateEventsQuery({
                author: alice,
                filters: [{ schema: 'schema1' }],
            }); // create with filter to prevent failure on .create()
            message.descriptor.filters = [{}]; // empty out filter properties
            const eventsQueryHandler = new EventsQueryHandler(didResolver, eventLog);
            const reply = yield eventsQueryHandler.handle({ tenant: alice.did, message });
            expect(reply.status.code).to.equal(400);
            expect(reply.entries).to.not.exist;
        }));
    });
}
//# sourceMappingURL=events-query.spec.js.map
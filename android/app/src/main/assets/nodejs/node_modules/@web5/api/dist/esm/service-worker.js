var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { UniversalResolver, DidDht, DidWeb } from '@web5/dids';
const workerSelf = self;
const DidResolver = new UniversalResolver({ didResolvers: [DidDht, DidWeb] });
const didUrlRegex = /^https?:\/\/dweb\/(([^/]+)\/.*)?$/;
const httpToHttpsRegex = /^http:/;
const trailingSlashRegex = /\/$/;
workerSelf.addEventListener('fetch', event => {
    const match = event.request.url.match(didUrlRegex);
    if (match) {
        event.respondWith((() => __awaiter(void 0, void 0, void 0, function* () {
            const normalizedUrl = event.request.url.replace(httpToHttpsRegex, 'https:').replace(trailingSlashRegex, '');
            const cachedResponse = yield caches.open('drl').then(cache => cache.match(normalizedUrl));
            return cachedResponse || handleEvent(event, match[2], match[1]);
        }))());
    }
});
function handleEvent(event, did, route) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const result = yield DidResolver.resolve(did);
            return yield fetchResource(event, result.didDocument, route);
        }
        catch (error) {
            if (error instanceof Response) {
                return error;
            }
            console.log(`Error in DID URL fetch: ${error}`);
            return new Response('DID URL fetch error', { status: 500 });
        }
    });
}
function fetchResource(event, ddo, route) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let endpoints = (_b = (_a = ddo === null || ddo === void 0 ? void 0 : ddo.service) === null || _a === void 0 ? void 0 : _a.find(service => service.type === 'DecentralizedWebNode')) === null || _b === void 0 ? void 0 : _b.serviceEndpoint;
        endpoints = (Array.isArray(endpoints) ? endpoints : [endpoints]).filter(url => url.startsWith('http'));
        if (!(endpoints === null || endpoints === void 0 ? void 0 : endpoints.length)) {
            throw new Response('DWeb Node resolution failed: no valid endpoints found.', { status: 530 });
        }
        for (const endpoint of endpoints) {
            try {
                const response = yield fetch(`${endpoint.replace(trailingSlashRegex, '')}/${route}`, { headers: event.request.headers });
                if (response.ok) {
                    return response;
                }
                console.log(`DWN endpoint error: ${response.status}`);
                return new Response('DWeb Node request failed', { status: response.status });
            }
            catch (error) {
                console.log(`DWN endpoint error: ${error}`);
                return new Response('DWeb Node request failed: ' + error, { status: 500 });
            }
        }
    });
}
//# sourceMappingURL=service-worker.js.map
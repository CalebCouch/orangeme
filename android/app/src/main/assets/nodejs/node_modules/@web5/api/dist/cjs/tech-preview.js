"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTechPreviewDwnEndpoints = void 0;
var dids_1 = require("@web5/dids");
/**
 * Dynamically selects up to 2 DWN endpoints that are provided
 * by default during the Tech Preview period.
 *
 * @beta
 */
function getTechPreviewDwnEndpoints() {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1, didDocument, _a, dwnService, techPreviewEndpoints, dwnUrls, numNodesToAllocate, attempts, nodeIdx, dwnUrl, healthCheck, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fetch('https://dwn.tbddev.org/.well-known/did.json')];
                case 1:
                    response = _b.sent();
                    if (!response.ok) {
                        throw new Error("HTTP Error: ".concat(response.status, " ").concat(response.statusText));
                    }
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _b.sent();
                    console.warn('failed to get tech preview dwn endpoints:', error_1.message);
                    return [2 /*return*/, []];
                case 3: return [4 /*yield*/, response.json()];
                case 4:
                    didDocument = _b.sent();
                    _a = __read(dids_1.utils.getServices({ didDocument: didDocument, id: '#dwn', type: 'DecentralizedWebNode' }), 1), dwnService = _a[0];
                    techPreviewEndpoints = new Set();
                    if (!('serviceEndpoint' in dwnService
                        && !Array.isArray(dwnService.serviceEndpoint)
                        && typeof dwnService.serviceEndpoint !== 'string'
                        && Array.isArray(dwnService.serviceEndpoint.nodes))) return [3 /*break*/, 10];
                    dwnUrls = dwnService.serviceEndpoint.nodes;
                    numNodesToAllocate = Math.min(dwnUrls.length, 2);
                    attempts = 0;
                    _b.label = 5;
                case 5:
                    if (!(attempts < dwnUrls.length && techPreviewEndpoints.size < numNodesToAllocate)) return [3 /*break*/, 10];
                    nodeIdx = getRandomInt(0, dwnUrls.length);
                    dwnUrl = dwnUrls[nodeIdx];
                    _b.label = 6;
                case 6:
                    _b.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, fetch("".concat(dwnUrl, "/health"))];
                case 7:
                    healthCheck = _b.sent();
                    if (healthCheck.ok) {
                        techPreviewEndpoints.add(dwnUrl);
                    }
                    return [3 /*break*/, 9];
                case 8:
                    error_2 = _b.sent();
                    return [3 /*break*/, 9];
                case 9:
                    attempts += 1;
                    return [3 /*break*/, 5];
                case 10: return [2 /*return*/, Array.from(techPreviewEndpoints)];
            }
        });
    });
}
exports.getTechPreviewDwnEndpoints = getTechPreviewDwnEndpoints;
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}
//# sourceMappingURL=tech-preview.js.map
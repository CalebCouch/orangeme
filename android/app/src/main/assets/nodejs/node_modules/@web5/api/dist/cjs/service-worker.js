"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var dids_1 = require("@web5/dids");
var workerSelf = self;
var DidResolver = new dids_1.UniversalResolver({ didResolvers: [dids_1.DidDht, dids_1.DidWeb] });
var didUrlRegex = /^https?:\/\/dweb\/(([^/]+)\/.*)?$/;
var httpToHttpsRegex = /^http:/;
var trailingSlashRegex = /\/$/;
workerSelf.addEventListener('fetch', function (event) {
    var match = event.request.url.match(didUrlRegex);
    if (match) {
        event.respondWith((function () { return __awaiter(void 0, void 0, void 0, function () {
            var normalizedUrl, cachedResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        normalizedUrl = event.request.url.replace(httpToHttpsRegex, 'https:').replace(trailingSlashRegex, '');
                        return [4 /*yield*/, caches.open('drl').then(function (cache) { return cache.match(normalizedUrl); })];
                    case 1:
                        cachedResponse = _a.sent();
                        return [2 /*return*/, cachedResponse || handleEvent(event, match[2], match[1])];
                }
            });
        }); })());
    }
});
function handleEvent(event, did, route) {
    return __awaiter(this, void 0, void 0, function () {
        var result, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, DidResolver.resolve(did)];
                case 1:
                    result = _a.sent();
                    return [4 /*yield*/, fetchResource(event, result.didDocument, route)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    error_1 = _a.sent();
                    if (error_1 instanceof Response) {
                        return [2 /*return*/, error_1];
                    }
                    console.log("Error in DID URL fetch: ".concat(error_1));
                    return [2 /*return*/, new Response('DID URL fetch error', { status: 500 })];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function fetchResource(event, ddo, route) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var endpoints, endpoints_1, endpoints_1_1, endpoint, response, error_2, e_1_1;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    endpoints = (_b = (_a = ddo === null || ddo === void 0 ? void 0 : ddo.service) === null || _a === void 0 ? void 0 : _a.find(function (service) { return service.type === 'DecentralizedWebNode'; })) === null || _b === void 0 ? void 0 : _b.serviceEndpoint;
                    endpoints = (Array.isArray(endpoints) ? endpoints : [endpoints]).filter(function (url) { return url.startsWith('http'); });
                    if (!(endpoints === null || endpoints === void 0 ? void 0 : endpoints.length)) {
                        throw new Response('DWeb Node resolution failed: no valid endpoints found.', { status: 530 });
                    }
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 8, 9, 10]);
                    endpoints_1 = __values(endpoints), endpoints_1_1 = endpoints_1.next();
                    _d.label = 2;
                case 2:
                    if (!!endpoints_1_1.done) return [3 /*break*/, 7];
                    endpoint = endpoints_1_1.value;
                    _d.label = 3;
                case 3:
                    _d.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, fetch("".concat(endpoint.replace(trailingSlashRegex, ''), "/").concat(route), { headers: event.request.headers })];
                case 4:
                    response = _d.sent();
                    if (response.ok) {
                        return [2 /*return*/, response];
                    }
                    console.log("DWN endpoint error: ".concat(response.status));
                    return [2 /*return*/, new Response('DWeb Node request failed', { status: response.status })];
                case 5:
                    error_2 = _d.sent();
                    console.log("DWN endpoint error: ".concat(error_2));
                    return [2 /*return*/, new Response('DWeb Node request failed: ' + error_2, { status: 500 })];
                case 6:
                    endpoints_1_1 = endpoints_1.next();
                    return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (endpoints_1_1 && !endpoints_1_1.done && (_c = endpoints_1.return)) _c.call(endpoints_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=service-worker.js.map
import { EventsGet, MessagesGet, RecordsRead, RecordsQuery, RecordsWrite, DwnMethodName, RecordsDelete, ProtocolsQuery, DwnInterfaceName, ProtocolsConfigure, EventsQuery, EventsSubscribe, RecordsSubscribe, } from '@tbd54566975/dwn-sdk-js';
export var DwnInterface;
(function (DwnInterface) {
    DwnInterface["EventsGet"] = "EventsGet";
    DwnInterface["EventsQuery"] = "EventsQuery";
    DwnInterface["EventsSubscribe"] = "EventsSubscribe";
    DwnInterface["MessagesGet"] = "MessagesGet";
    DwnInterface["ProtocolsConfigure"] = "ProtocolsConfigure";
    DwnInterface["ProtocolsQuery"] = "ProtocolsQuery";
    DwnInterface["RecordsDelete"] = "RecordsDelete";
    DwnInterface["RecordsQuery"] = "RecordsQuery";
    DwnInterface["RecordsRead"] = "RecordsRead";
    DwnInterface["RecordsSubscribe"] = "RecordsSubscribe";
    DwnInterface["RecordsWrite"] = "RecordsWrite";
})(DwnInterface || (DwnInterface = {}));
export const dwnMessageConstructors = {
    [DwnInterface.EventsGet]: EventsGet,
    [DwnInterface.EventsQuery]: EventsQuery,
    [DwnInterface.EventsSubscribe]: EventsSubscribe,
    [DwnInterface.MessagesGet]: MessagesGet,
    [DwnInterface.ProtocolsConfigure]: ProtocolsConfigure,
    [DwnInterface.ProtocolsQuery]: ProtocolsQuery,
    [DwnInterface.RecordsDelete]: RecordsDelete,
    [DwnInterface.RecordsQuery]: RecordsQuery,
    [DwnInterface.RecordsRead]: RecordsRead,
    [DwnInterface.RecordsSubscribe]: RecordsSubscribe,
    [DwnInterface.RecordsWrite]: RecordsWrite,
};
// The following types are exported by the DWN SDK and are re-exported here so that dependent
// packages do not need to import the DWN SDK directly. This ensures that downstream packages are
// always using the same version of the DWN SDK as the agent package.
export { DwnConstant, DateSort as DwnDateSort, EncryptionAlgorithm as DwnEncryptionAlgorithm, KeyDerivationScheme as DwnKeyDerivationScheme, } from '@tbd54566975/dwn-sdk-js';
//# sourceMappingURL=dwn.js.map
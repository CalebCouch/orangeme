var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AllowAllTenantGate } from './core/tenant-gate.js';
import { EventsGetHandler } from './handlers/events-get.js';
import { EventsQueryHandler } from './handlers/events-query.js';
import { EventsSubscribeHandler } from './handlers/events-subscribe.js';
import { Message } from './core/message.js';
import { messageReplyFromError } from './core/message-reply.js';
import { MessagesGetHandler } from './handlers/messages-get.js';
import { ProtocolsConfigureHandler } from './handlers/protocols-configure.js';
import { ProtocolsQueryHandler } from './handlers/protocols-query.js';
import { RecordsDeleteHandler } from './handlers/records-delete.js';
import { RecordsQueryHandler } from './handlers/records-query.js';
import { RecordsReadHandler } from './handlers/records-read.js';
import { RecordsSubscribeHandler } from './handlers/records-subscribe.js';
import { RecordsWriteHandler } from './handlers/records-write.js';
import { DidDht, DidIon, DidKey, DidResolverCacheLevel, UniversalResolver } from '@web5/dids';
import { DwnInterfaceName, DwnMethodName } from './enums/dwn-interface-method.js';
export class Dwn {
    constructor(config) {
        this.didResolver = config.didResolver;
        this.tenantGate = config.tenantGate;
        this.eventStream = config.eventStream;
        this.messageStore = config.messageStore;
        this.dataStore = config.dataStore;
        this.eventLog = config.eventLog;
        this.eventStream = config.eventStream;
        this.methodHandlers = {
            [DwnInterfaceName.Events + DwnMethodName.Get]: new EventsGetHandler(this.didResolver, this.eventLog),
            [DwnInterfaceName.Events + DwnMethodName.Query]: new EventsQueryHandler(this.didResolver, this.eventLog),
            [DwnInterfaceName.Events + DwnMethodName.Subscribe]: new EventsSubscribeHandler(this.didResolver, this.eventStream),
            [DwnInterfaceName.Messages + DwnMethodName.Get]: new MessagesGetHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Protocols + DwnMethodName.Configure]: new ProtocolsConfigureHandler(this.didResolver, this.messageStore, this.eventLog, this.eventStream),
            [DwnInterfaceName.Protocols + DwnMethodName.Query]: new ProtocolsQueryHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Delete]: new RecordsDeleteHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog, this.eventStream),
            [DwnInterfaceName.Records + DwnMethodName.Query]: new RecordsQueryHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Read]: new RecordsReadHandler(this.didResolver, this.messageStore, this.dataStore),
            [DwnInterfaceName.Records + DwnMethodName.Subscribe]: new RecordsSubscribeHandler(this.didResolver, this.messageStore, this.eventStream),
            [DwnInterfaceName.Records + DwnMethodName.Write]: new RecordsWriteHandler(this.didResolver, this.messageStore, this.dataStore, this.eventLog, this.eventStream)
        };
    }
    /**
     * Creates an instance of the DWN.
     */
    static create(config) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = config.didResolver) !== null && _a !== void 0 ? _a : (config.didResolver = new UniversalResolver({
                didResolvers: [DidDht, DidIon, DidKey],
                cache: new DidResolverCacheLevel({ location: 'RESOLVERCACHE' }),
            }));
            (_b = config.tenantGate) !== null && _b !== void 0 ? _b : (config.tenantGate = new AllowAllTenantGate());
            const dwn = new Dwn(config);
            yield dwn.open();
            return dwn;
        });
    }
    open() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.messageStore.open();
            yield this.dataStore.open();
            yield this.eventLog.open();
            yield ((_a = this.eventStream) === null || _a === void 0 ? void 0 : _a.open());
        });
    }
    close() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.eventStream) === null || _a === void 0 ? void 0 : _a.close());
            yield this.messageStore.close();
            yield this.dataStore.close();
            yield this.eventLog.close();
        });
    }
    processMessage(tenant, rawMessage, options = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const errorMessageReply = (_a = yield this.validateTenant(tenant)) !== null && _a !== void 0 ? _a : yield this.validateMessageIntegrity(rawMessage);
            if (errorMessageReply !== undefined) {
                return errorMessageReply;
            }
            const { dataStream, subscriptionHandler } = options;
            const handlerKey = rawMessage.descriptor.interface + rawMessage.descriptor.method;
            const methodHandlerReply = yield this.methodHandlers[handlerKey].handle({
                tenant,
                message: rawMessage,
                dataStream,
                subscriptionHandler
            });
            return methodHandlerReply;
        });
    }
    /**
     * Checks tenant gate to see if tenant is allowed.
     * @param tenant The tenant DID to route the given message to.
     * @returns GenericMessageReply if the message has an integrity error, otherwise undefined.
     */
    validateTenant(tenant) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.tenantGate.isActiveTenant(tenant);
            if (!result.isActiveTenant) {
                const detail = (_a = result.detail) !== null && _a !== void 0 ? _a : `DID ${tenant} is not an active tenant.`;
                return {
                    status: { code: 401, detail }
                };
            }
        });
    }
    /**
     * Validates structure of DWN message
     * @param tenant The tenant DID to route the given message to.
     * @param dwnMessageInterface The interface of DWN message.
     * @param dwnMessageMethod The interface of DWN message.
  
     * @returns GenericMessageReply if the message has an integrity error, otherwise undefined.
     */
    validateMessageIntegrity(rawMessage) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // Verify interface and method
            const dwnInterface = (_a = rawMessage === null || rawMessage === void 0 ? void 0 : rawMessage.descriptor) === null || _a === void 0 ? void 0 : _a.interface;
            const dwnMethod = (_b = rawMessage === null || rawMessage === void 0 ? void 0 : rawMessage.descriptor) === null || _b === void 0 ? void 0 : _b.method;
            if (dwnInterface === undefined || dwnMethod === undefined) {
                return {
                    status: { code: 400, detail: `Both interface and method must be present, interface: ${dwnInterface}, method: ${dwnMethod}` }
                };
            }
            // validate message structure
            try {
                // consider to push this down to individual handlers
                Message.validateJsonSchema(rawMessage);
            }
            catch (error) {
                return messageReplyFromError(error, 400);
            }
        });
    }
}
;
;
//# sourceMappingURL=dwn.js.map
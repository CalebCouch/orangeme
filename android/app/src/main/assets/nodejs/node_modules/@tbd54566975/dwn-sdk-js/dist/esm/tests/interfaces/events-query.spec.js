var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventsQuery } from '../../src/interfaces/events-query.js';
import { Jws } from '../../src/utils/jws.js';
import { Message } from '../../src/core/message.js';
import { TestDataGenerator } from '../utils/test-data-generator.js';
import { Time } from '../../src/utils/time.js';
import chaiAsPromised from 'chai-as-promised';
import chai, { expect } from 'chai';
chai.use(chaiAsPromised);
describe('EventsQuery Message', () => {
    describe('create()', () => {
        it('should use `messageTimestamp` as is if given', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'anything' }],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            expect(eventsQuery.message.descriptor.messageTimestamp).to.equal(currentTime);
        }));
        it('should auto-normalize protocol URL', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const options = {
                recipient: alice.did,
                signer: Jws.createSigner(alice),
                filters: [{ protocol: 'example.com/' }],
            };
            const eventsQuery = yield EventsQuery.create(options);
            const message = eventsQuery.message;
            expect(message.descriptor.filters.length).to.equal(1);
            expect(message.descriptor.filters[0].protocol).to.eq('http://example.com');
        }));
        it('should auto-normalize schema URL', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const options = {
                recipient: alice.did,
                signer: Jws.createSigner(alice),
                filters: [{ schema: 'example.com/' }],
            };
            const eventsQuery = yield EventsQuery.create(options);
            const message = eventsQuery.message;
            expect(message.descriptor.filters.length).to.equal(1);
            expect(message.descriptor.filters[0].schema).to.eq('http://example.com');
        }));
        it('throws an exception if message has no filters', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQueryPromise = EventsQuery.create({
                filters: [],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            yield expect(eventsQueryPromise).to.eventually.be.rejectedWith('fewer than 1 items');
        }));
        it('removes empty filters', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            // single empty filter fails
            const eventsQueryPromise = EventsQuery.create({
                filters: [{}],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            yield expect(eventsQueryPromise).to.eventually.be.rejectedWith('fewer than 1 items');
            // empty filter gets removed, valid filter remains
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'schema' }, {}],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            expect(eventsQuery.message.descriptor.filters.length).to.equal(1);
        }));
    });
    describe('parse', () => {
        it('parses a message into an EventsQuery instance', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'anything' }],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            const parsed = yield EventsQuery.parse(eventsQuery.message);
            expect(parsed).to.be.instanceof(EventsQuery);
            const expectedMessageCid = yield Message.getCid(eventsQuery.message);
            const messageCid = yield Message.getCid(parsed.message);
            expect(messageCid).to.equal(expectedMessageCid);
        }));
        it('throws an exception if message is not a valid EventsQuery message', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'anything' }],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            const { message } = eventsQuery;
            message.descriptor['bad_property'] = 'property';
            const eventsQueryPromise = EventsQuery.parse(message);
            yield expect(eventsQueryPromise).to.eventually.be.rejectedWith('must NOT have additional properties');
        }));
        it('throws an exception if message has no filters', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'anything' }],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            const { message } = eventsQuery;
            message.descriptor.filters = []; //empty out the filters
            const eventsQueryPromise = EventsQuery.parse(message);
            yield expect(eventsQueryPromise).to.eventually.be.rejectedWith('fewer than 1 items');
        }));
        it('throws an exception if message has an empty filter', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = Time.getCurrentTimestamp();
            const eventsQuery = yield EventsQuery.create({
                filters: [{ schema: 'anything' }],
                messageTimestamp: currentTime,
                signer: Jws.createSigner(alice),
            });
            const { message } = eventsQuery;
            message.descriptor.filters.push({}); // add an empty filter
            const eventsQueryPromise = EventsQuery.parse(message);
            yield expect(eventsQueryPromise).to.eventually.be.rejectedWith('must NOT have fewer than 1 properties');
        }));
    });
});
//# sourceMappingURL=events-query.spec.js.map
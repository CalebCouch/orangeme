var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Encoder } from '../utils/encoder.js';
import { PermissionGrant } from './permission-grant.js';
import { RecordsWrite } from '../../src/interfaces/records-write.js';
import { Time } from '../utils/time.js';
import { validateJsonSchema } from '../schema-validator.js';
import { DwnError, DwnErrorCode } from '../core/dwn-error.js';
import { DwnInterfaceName, DwnMethodName } from '../enums/dwn-interface-method.js';
import { normalizeProtocolUrl, normalizeSchemaUrl } from '../utils/url.js';
/**
 * This is a first-class DWN protocol for managing permission grants of a given DWN.
 */
export class PermissionsProtocol {
    static parseRequest(base64UrlEncodedRequest) {
        return Encoder.base64UrlToObject(base64UrlEncodedRequest);
    }
    /**
     * Convenience method to create a permission request.
     */
    static createRequest(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = PermissionsProtocol.normalizePermissionScope(options.scope);
            const permissionRequestData = {
                description: options.description,
                delegated: options.delegated,
                scope,
                conditions: options.conditions,
            };
            const permissionRequestBytes = Encoder.objectToBytes(permissionRequestData);
            const recordsWrite = yield RecordsWrite.create({
                signer: options.signer,
                messageTimestamp: options.dateRequested,
                protocol: PermissionsProtocol.uri,
                protocolPath: PermissionsProtocol.requestPath,
                dataFormat: 'application/json',
                data: permissionRequestBytes,
            });
            return {
                recordsWrite,
                permissionRequestData,
                permissionRequestBytes
            };
        });
    }
    /**
     * Convenience method to create a permission grant.
     */
    static createGrant(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const scope = PermissionsProtocol.normalizePermissionScope(options.scope);
            const permissionGrantData = {
                dateExpires: options.dateExpires,
                requestId: options.requestId,
                description: options.description,
                delegated: options.delegated,
                scope,
                conditions: options.conditions,
            };
            const permissionGrantBytes = Encoder.objectToBytes(permissionGrantData);
            const recordsWrite = yield RecordsWrite.create({
                signer: options.signer,
                messageTimestamp: options.dateGranted,
                dateCreated: options.dateGranted,
                recipient: options.grantedTo,
                protocol: PermissionsProtocol.uri,
                protocolPath: PermissionsProtocol.grantPath,
                dataFormat: 'application/json',
                data: permissionGrantBytes,
            });
            const dataEncodedMessage = Object.assign(Object.assign({}, recordsWrite.message), { encodedData: Encoder.bytesToBase64Url(permissionGrantBytes) });
            return {
                recordsWrite,
                permissionGrantData,
                permissionGrantBytes,
                dataEncodedMessage
            };
        });
    }
    /**
     * Convenience method to create a permission revocation.
     */
    static createRevocation(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const permissionRevocationData = {
                description: options.description,
            };
            const permissionRevocationBytes = Encoder.objectToBytes(permissionRevocationData);
            const recordsWrite = yield RecordsWrite.create({
                signer: options.signer,
                parentContextId: options.grantId,
                protocol: PermissionsProtocol.uri,
                protocolPath: PermissionsProtocol.revocationPath,
                dataFormat: 'application/json',
                data: permissionRevocationBytes,
            });
            return {
                recordsWrite,
                permissionRevocationData,
                permissionRevocationBytes
            };
        });
    }
    /**
     * Validates the given Permissions protocol RecordsWrite. It can be a request, grant, or revocation.
     */
    static validateSchema(recordsWriteMessage, dataBytes) {
        const dataString = Encoder.bytesToString(dataBytes);
        const dataObject = JSON.parse(dataString);
        if (recordsWriteMessage.descriptor.protocolPath === PermissionsProtocol.requestPath) {
            validateJsonSchema('PermissionRequestData', dataObject);
        }
        else if (recordsWriteMessage.descriptor.protocolPath === PermissionsProtocol.grantPath) {
            validateJsonSchema('PermissionGrantData', dataObject);
            // more nuanced validation that are annoying/difficult to do using JSON schema
            const permissionGrantData = dataObject;
            PermissionsProtocol.validateScope(permissionGrantData.scope);
            Time.validateTimestamp(permissionGrantData.dateExpires);
        }
        else if (recordsWriteMessage.descriptor.protocolPath === PermissionsProtocol.revocationPath) {
            validateJsonSchema('PermissionRevocationData', dataObject);
        }
        else {
            // defensive programming, should be unreachable externally
            throw new DwnError(DwnErrorCode.PermissionsProtocolValidateSchemaUnexpectedRecord, `Unexpected permission record: ${recordsWriteMessage.descriptor.protocolPath}`);
        }
    }
    /**
     * Fetches PermissionGrant with the specified `recordID`.
     * @returns the PermissionGrant matching the `recordId` specified.
     * @throws {Error} if PermissionGrant does not exist
     */
    static fetchGrant(tenant, messageStore, permissionGrantId) {
        return __awaiter(this, void 0, void 0, function* () {
            const grantQuery = {
                recordId: permissionGrantId,
                isLatestBaseState: true
            };
            const { messages } = yield messageStore.query(tenant, [grantQuery]);
            const possibleGrantMessage = messages[0];
            const dwnInterface = possibleGrantMessage === null || possibleGrantMessage === void 0 ? void 0 : possibleGrantMessage.descriptor.interface;
            const dwnMethod = possibleGrantMessage === null || possibleGrantMessage === void 0 ? void 0 : possibleGrantMessage.descriptor.method;
            if (dwnInterface !== DwnInterfaceName.Records ||
                dwnMethod !== DwnMethodName.Write ||
                possibleGrantMessage.descriptor.protocolPath !== PermissionsProtocol.grantPath) {
                throw new DwnError(DwnErrorCode.GrantAuthorizationGrantMissing, `Could not find permission grant with record ID ${permissionGrantId}.`);
            }
            const permissionGrantMessage = possibleGrantMessage;
            const permissionGrant = yield PermissionGrant.parse(permissionGrantMessage);
            return permissionGrant;
        });
    }
    /**
     * Normalizes the given permission scope if needed.
     * @returns The normalized permission scope.
     */
    static normalizePermissionScope(permissionScope) {
        const scope = Object.assign({}, permissionScope);
        if (PermissionsProtocol.isRecordPermissionScope(scope)) {
            // normalize protocol and schema URLs if they are present
            if (scope.protocol !== undefined) {
                scope.protocol = normalizeProtocolUrl(scope.protocol);
            }
            if (scope.schema !== undefined) {
                scope.schema = normalizeSchemaUrl(scope.schema);
            }
        }
        return scope;
    }
    /**
     * Type guard to determine if the scope is a record permission scope.
     */
    static isRecordPermissionScope(scope) {
        return scope.interface === 'Records';
    }
    /**
     * Validates scope.
     */
    static validateScope(scope) {
        if (!this.isRecordPermissionScope(scope)) {
            return;
        }
        // else we are dealing with a RecordsPermissionScope
        // `schema` scopes may not have protocol-related fields
        if (scope.schema !== undefined) {
            if (scope.protocol !== undefined || scope.contextId !== undefined || scope.protocolPath) {
                throw new DwnError(DwnErrorCode.PermissionsProtocolValidateScopeSchemaProhibitedProperties, 'Permission grants that have `schema` present cannot also have protocol-related properties present');
            }
        }
        if (scope.protocol !== undefined) {
            // `contextId` and `protocolPath` are mutually exclusive
            if (scope.contextId !== undefined && scope.protocolPath !== undefined) {
                throw new DwnError(DwnErrorCode.PermissionsProtocolValidateScopeContextIdProhibitedProperties, 'Permission grants cannot have both `contextId` and `protocolPath` present');
            }
        }
    }
}
/**
 * The URI of the DWN Permissions protocol.
 */
PermissionsProtocol.uri = 'https://tbd.website/dwn/permissions';
/**
 * The protocol path of the `request` record.
 */
PermissionsProtocol.requestPath = 'request';
/**
 * The protocol path of the `grant` record.
 */
PermissionsProtocol.grantPath = 'grant';
/**
 * The protocol path of the `revocation` record.
 */
PermissionsProtocol.revocationPath = 'grant/revocation';
/**
 * The definition of the Permissions protocol.
 */
PermissionsProtocol.definition = {
    published: true,
    protocol: PermissionsProtocol.uri,
    types: {
        request: {
            dataFormats: ['application/json']
        },
        grant: {
            dataFormats: ['application/json']
        },
        revocation: {
            dataFormats: ['application/json']
        }
    },
    structure: {
        request: {
            $size: {
                max: 10000
            },
            $actions: [
                {
                    who: 'anyone',
                    can: ['create']
                }
            ]
        },
        grant: {
            $size: {
                max: 10000
            },
            $actions: [
                {
                    who: 'recipient',
                    of: 'grant',
                    can: ['read', 'query']
                }
            ],
            revocation: {
                $size: {
                    max: 10000
                },
                $actions: [
                    {
                        who: 'anyone',
                        can: ['read']
                    }
                ]
            }
        }
    }
};
;
//# sourceMappingURL=permissions.js.map
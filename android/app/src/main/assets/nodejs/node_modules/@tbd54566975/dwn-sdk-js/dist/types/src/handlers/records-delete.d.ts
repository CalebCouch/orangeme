import type { DataStore } from '../types/data-store.js';
import type { DidResolver } from '@web5/dids';
import type { EventLog } from '../types/event-log.js';
import type { EventStream } from '../types/subscriptions.js';
import type { GenericMessageReply } from '../types/message-types.js';
import type { MessageStore } from '../types//message-store.js';
import type { MethodHandler } from '../types/method-handler.js';
import type { RecordsDeleteMessage } from '../types/records-types.js';
export declare class RecordsDeleteHandler implements MethodHandler {
    private didResolver;
    private messageStore;
    private dataStore;
    private eventLog;
    private eventStream?;
    constructor(didResolver: DidResolver, messageStore: MessageStore, dataStore: DataStore, eventLog: EventLog, eventStream?: EventStream | undefined);
    handle({ tenant, message }: {
        tenant: string;
        message: RecordsDeleteMessage;
    }): Promise<GenericMessageReply>;
    /**
     * Authorizes a RecordsDelete message.
     *
     * @param newestRecordsWrite Newest RecordsWrite of the record to be deleted.
     */
    private static authorizeRecordsDelete;
}
//# sourceMappingURL=records-delete.d.ts.map
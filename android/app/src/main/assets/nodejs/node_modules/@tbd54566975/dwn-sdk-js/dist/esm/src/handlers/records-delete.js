var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { authenticate } from '../core/auth.js';
import { Message } from '../core/message.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { ProtocolAuthorization } from '../core/protocol-authorization.js';
import { RecordsDelete } from '../interfaces/records-delete.js';
import { RecordsWrite } from '../interfaces/records-write.js';
import { StorageController } from '../store/storage-controller.js';
import { DwnError, DwnErrorCode } from '../core/dwn-error.js';
import { DwnInterfaceName, DwnMethodName } from '../enums/dwn-interface-method.js';
export class RecordsDeleteHandler {
    constructor(didResolver, messageStore, dataStore, eventLog, eventStream) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.dataStore = dataStore;
        this.eventLog = eventLog;
        this.eventStream = eventStream;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let recordsDelete;
            try {
                recordsDelete = yield RecordsDelete.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            // authentication
            try {
                yield authenticate(message.authorization, this.didResolver);
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // get existing records matching the `recordId`
            const query = {
                interface: DwnInterfaceName.Records,
                recordId: message.descriptor.recordId
            };
            const { messages: existingMessages } = yield this.messageStore.query(tenant, [query]);
            // find which message is the newest, and if the incoming message is the newest
            const newestExistingMessage = yield Message.getNewestMessage(existingMessages);
            let incomingMessageIsNewest = false;
            let newestMessage;
            // if incoming message is newest
            if (newestExistingMessage === undefined || (yield Message.isNewer(message, newestExistingMessage))) {
                incomingMessageIsNewest = true;
                newestMessage = message;
            }
            else { // existing message is the same age or newer than the incoming message
                newestMessage = newestExistingMessage;
            }
            if (!incomingMessageIsNewest) {
                return {
                    status: { code: 409, detail: 'Conflict' }
                };
            }
            // return Not Found if record does not exist or is already deleted
            if (newestExistingMessage === undefined || newestExistingMessage.descriptor.method === DwnMethodName.Delete) {
                return {
                    status: { code: 404, detail: 'Not Found' }
                };
            }
            // authorization
            try {
                yield RecordsDeleteHandler.authorizeRecordsDelete(tenant, recordsDelete, yield RecordsWrite.parse(newestExistingMessage), this.messageStore);
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            const initialWrite = yield RecordsWrite.getInitialWrite(existingMessages);
            const indexes = recordsDelete.constructIndexes(initialWrite);
            const messageCid = yield Message.getCid(message);
            yield this.messageStore.put(tenant, message, indexes);
            yield this.eventLog.append(tenant, messageCid, indexes);
            // only emit if the event stream is set
            if (this.eventStream !== undefined) {
                this.eventStream.emit(tenant, { message, initialWrite }, indexes);
            }
            if (message.descriptor.prune) {
                // purge/hard-delete all descendent records
                yield StorageController.purgeRecordDescendants(tenant, message.descriptor.recordId, this.messageStore, this.dataStore, this.eventLog);
            }
            // delete all existing messages that are not newest, except for the initial write
            yield StorageController.deleteAllOlderMessagesButKeepInitialWrite(tenant, existingMessages, newestMessage, this.messageStore, this.dataStore, this.eventLog);
            const messageReply = {
                status: { code: 202, detail: 'Accepted' }
            };
            return messageReply;
        });
    }
    ;
    /**
     * Authorizes a RecordsDelete message.
     *
     * @param newestRecordsWrite Newest RecordsWrite of the record to be deleted.
     */
    static authorizeRecordsDelete(tenant, recordsDelete, newestRecordsWrite, messageStore) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Message.isSignedByAuthorDelegate(recordsDelete.message)) {
                yield recordsDelete.authorizeDelegate(newestRecordsWrite.message, messageStore);
            }
            if (recordsDelete.author === tenant) {
                return;
            }
            else if (newestRecordsWrite.message.descriptor.protocol !== undefined) {
                yield ProtocolAuthorization.authorizeDelete(tenant, recordsDelete, newestRecordsWrite, messageStore);
            }
            else {
                throw new DwnError(DwnErrorCode.RecordsDeleteAuthorizationFailed, 'RecordsDelete message failed authorization');
            }
        });
    }
}
;
//# sourceMappingURL=records-delete.js.map